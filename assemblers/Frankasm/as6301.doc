.HM A 1 1 1 1 1 1
.H 1 "Appendix for as6301 Frankenstein Assembler"
.H 2 "Pseudo Operations"
.H 3 "Standard Pseudo Operation Mnemonics"
.VL 40 5 1
.LI "End"
END
.LI "File Inclusion"
INCL
INCLUDE
.LI "If"
IF
.LI "Else"
ELSE
.LI "End If"
ENDI
.LI "Equate"
EQU
.LI "Set"
SET
.LI "Org"
ORG
.LI "Reserve Memory"
RESERVE
RMB
.LI "Define Byte Data"
BYTE
DB
FCB
.LI "Define Word Data"
DW
FDB
WORD
.LI "Define String Data"
FCC
STRING
.LI "Define Character Set Translation"
CHARSET
.LI "Define Character Value"
CHARDEF
CHD
.LI "Use Character Translation"
CHARUSE
.LE
.H 2 "Instructions"
.H 3 "Instruction List"
.TS H
;
l l l.
Opcode	Syntax	Selection Criteria
.sp
.TH
.sp
ABA	
.sp
ABX	
.sp
ADC	 ACCUM '#' expr	REGA
ADC	 ACCUM '#' expr	REGB
ADC	 ACCUM expr	REGA+DIRECT
ADC	 ACCUM expr	REGA+EXTENDED
ADC	 ACCUM expr	REGB+DIRECT
ADC	 ACCUM expr	REGB+EXTENDED
ADC	 ACCUM indexed	REGA
ADC	 ACCUM indexed	REGB
.sp
ADCA	 '#' expr
ADCA	 expr	DIRECT
ADCA	 expr	EXTENDED
ADCA	 indexed
.sp
ADCB	 '#' expr
ADCB	 expr	DIRECT
ADCB	 expr	EXTENDED
ADCB	 indexed
.sp
ADD	 ACCUM '#' expr	REGA
ADD	 ACCUM '#' expr	REGB
ADD	 ACCUM expr	REGA+DIRECT
ADD	 ACCUM expr	REGA+EXTENDED
ADD	 ACCUM expr	REGB+DIRECT
ADD	 ACCUM expr	REGB+EXTENDED
ADD	 ACCUM indexed	REGA
ADD	 ACCUM indexed	REGB
.sp
ADDA	 '#' expr
ADDA	 expr	DIRECT
ADDA	 expr	EXTENDED
ADDA	 indexed
.sp
ADDB	 '#' expr
ADDB	 expr	DIRECT
ADDB	 expr	EXTENDED
ADDB	 indexed
.sp
ADDD	 '#' expr
ADDD	 expr	DIRECT
ADDD	 expr	EXTENDED
ADDD	 indexed
.sp
AIM	 '#' expr ',' expr
AIM	 '#' expr ',' indexed 
.sp
AND	 ACCUM '#' expr	REGA
AND	 ACCUM '#' expr	REGB
AND	 ACCUM expr	REGA+DIRECT
AND	 ACCUM expr	REGA+EXTENDED
AND	 ACCUM expr	REGB+DIRECT
AND	 ACCUM expr	REGB+EXTENDED
AND	 ACCUM indexed	REGA
AND	 ACCUM indexed	REGB
.sp
ANDA	 '#' expr
ANDA	 expr	DIRECT
ANDA	 expr	EXTENDED
ANDA	 indexed
.sp
ANDB	 '#' expr
ANDB	 expr	DIRECT
ANDB	 expr	EXTENDED
ANDB	 indexed
.sp
ASL	 ACCUM	REGA
ASL	 ACCUM	REGB
ASL	 expr
ASL	 indexed
.sp
ASLA	
.sp
ASLB	
.sp
ASLD	
.sp
ASR	 ACCUM	REGA
ASR	 ACCUM	REGB
ASR	 expr
ASR	 indexed
.sp
ASRA	
.sp
ASRB	
.sp
BCC	 expr
.sp
BCLR	 expr ',' expr	BIT0
BCLR	 expr ',' expr	BIT1
BCLR	 expr ',' expr	BIT2
BCLR	 expr ',' expr	BIT3
BCLR	 expr ',' expr	BIT4
BCLR	 expr ',' expr	BIT5
BCLR	 expr ',' expr	BIT6
BCLR	 expr ',' expr	BIT7
BCLR	 expr ',' indexed 	BIT0
BCLR	 expr ',' indexed 	BIT1
BCLR	 expr ',' indexed 	BIT2
BCLR	 expr ',' indexed 	BIT3
BCLR	 expr ',' indexed 	BIT4
BCLR	 expr ',' indexed 	BIT5
BCLR	 expr ',' indexed 	BIT6
BCLR	 expr ',' indexed 	BIT7
.sp
BCS	 expr
.sp
BEQ	 expr
.sp
BGE	 expr
.sp
BGT	 expr
.sp
BHI	 expr
.sp
BHS	 expr
.sp
BIT	 ACCUM '#' expr	REGA
BIT	 ACCUM '#' expr	REGB
BIT	 ACCUM expr	REGA+DIRECT
BIT	 ACCUM expr	REGA+EXTENDED
BIT	 ACCUM expr	REGB+DIRECT
BIT	 ACCUM expr	REGB+EXTENDED
BIT	 ACCUM indexed	REGA
BIT	 ACCUM indexed	REGB
.sp
BITA	 '#' expr
BITA	 expr	DIRECT
BITA	 expr	EXTENDED
BITA	 indexed
.sp
BITB	 '#' expr
BITB	 expr	DIRECT
BITB	 expr	EXTENDED
BITB	 indexed
.sp
BLE	 expr
.sp
BLO	 expr
.sp
BLS	 expr
.sp
BLT	 expr
.sp
BMI	 expr
.sp
BNE	 expr
.sp
BPL	 expr
.sp
BRA	 expr
.sp
BRN	 expr
.sp
BSET	 expr ',' expr	BIT0
BSET	 expr ',' expr	BIT1
BSET	 expr ',' expr	BIT2
BSET	 expr ',' expr	BIT3
BSET	 expr ',' expr	BIT4
BSET	 expr ',' expr	BIT5
BSET	 expr ',' expr	BIT6
BSET	 expr ',' expr	BIT7
BSET	 expr ',' indexed 	BIT0
BSET	 expr ',' indexed 	BIT1
BSET	 expr ',' indexed 	BIT2
BSET	 expr ',' indexed 	BIT3
BSET	 expr ',' indexed 	BIT4
BSET	 expr ',' indexed 	BIT5
BSET	 expr ',' indexed 	BIT6
BSET	 expr ',' indexed 	BIT7
.sp
BSR	 expr
.sp
BTGL	 expr ',' expr	BIT0
BTGL	 expr ',' expr	BIT1
BTGL	 expr ',' expr	BIT2
BTGL	 expr ',' expr	BIT3
BTGL	 expr ',' expr	BIT4
BTGL	 expr ',' expr	BIT5
BTGL	 expr ',' expr	BIT6
BTGL	 expr ',' expr	BIT7
BTGL	 expr ',' indexed 	BIT0
BTGL	 expr ',' indexed 	BIT1
BTGL	 expr ',' indexed 	BIT2
BTGL	 expr ',' indexed 	BIT3
BTGL	 expr ',' indexed 	BIT4
BTGL	 expr ',' indexed 	BIT5
BTGL	 expr ',' indexed 	BIT6
BTGL	 expr ',' indexed 	BIT7
.sp
BTST	 expr ',' expr	BIT0
BTST	 expr ',' expr	BIT1
BTST	 expr ',' expr	BIT2
BTST	 expr ',' expr	BIT3
BTST	 expr ',' expr	BIT4
BTST	 expr ',' expr	BIT5
BTST	 expr ',' expr	BIT6
BTST	 expr ',' expr	BIT7
BTST	 expr ',' indexed 	BIT0
BTST	 expr ',' indexed 	BIT1
BTST	 expr ',' indexed 	BIT2
BTST	 expr ',' indexed 	BIT3
BTST	 expr ',' indexed 	BIT4
BTST	 expr ',' indexed 	BIT5
BTST	 expr ',' indexed 	BIT6
BTST	 expr ',' indexed 	BIT7
.sp
BVC	 expr
.sp
BVS	 expr
.sp
CBA	
.sp
CLC	
.sp
CLI	
.sp
CLR	 ACCUM	REGA
CLR	 ACCUM	REGB
CLR	 expr
CLR	 indexed
.sp
CLRA	
.sp
CLRB	
.sp
CLV	
.sp
CMP	 ACCUM '#' expr	REGA
CMP	 ACCUM '#' expr	REGB
CMP	 ACCUM expr	REGA+DIRECT
CMP	 ACCUM expr	REGA+EXTENDED
CMP	 ACCUM expr	REGB+DIRECT
CMP	 ACCUM expr	REGB+EXTENDED
CMP	 ACCUM indexed	REGA
CMP	 ACCUM indexed	REGB
.sp
CMPA	 '#' expr
CMPA	 expr	DIRECT
CMPA	 expr	EXTENDED
CMPA	 indexed
.sp
CMPB	 '#' expr
CMPB	 expr	DIRECT
CMPB	 expr	EXTENDED
CMPB	 indexed
.sp
COM	 ACCUM	REGA
COM	 ACCUM	REGB
COM	 expr
COM	 indexed
.sp
COMA	
.sp
COMB	
.sp
CPX	 '#' expr
CPX	 expr	DIRECT
CPX	 expr	EXTENDED
CPX	 indexed
.sp
DAA	
.sp
DEC	 ACCUM	REGA
DEC	 ACCUM	REGB
DEC	 expr
DEC	 indexed
.sp
DECA	
.sp
DECB	
.sp
DES	
.sp
DEX	
.sp
EIM	 '#' expr ',' expr
EIM	 '#' expr ',' indexed 
.sp
EOR	 ACCUM '#' expr	REGA
EOR	 ACCUM '#' expr	REGB
EOR	 ACCUM expr	REGA+DIRECT
EOR	 ACCUM expr	REGA+EXTENDED
EOR	 ACCUM expr	REGB+DIRECT
EOR	 ACCUM expr	REGB+EXTENDED
EOR	 ACCUM indexed	REGA
EOR	 ACCUM indexed	REGB
.sp
EORA	 '#' expr
EORA	 expr	DIRECT
EORA	 expr	EXTENDED
EORA	 indexed
.sp
EORB	 '#' expr
EORB	 expr	DIRECT
EORB	 expr	EXTENDED
EORB	 indexed
.sp
INC	 ACCUM	REGA
INC	 ACCUM	REGB
INC	 expr
INC	 indexed
.sp
INCA	
.sp
INCB	
.sp
INS	
.sp
INX	
.sp
JMP	 expr
JMP	 indexed
.sp
JSR	 expr	DIRECT
JSR	 expr	EXTENDED
JSR	 indexed
.sp
LDA	 ACCUM '#' expr	REGA
LDA	 ACCUM '#' expr	REGB
LDA	 ACCUM expr	REGA+DIRECT
LDA	 ACCUM expr	REGA+EXTENDED
LDA	 ACCUM expr	REGB+DIRECT
LDA	 ACCUM expr	REGB+EXTENDED
LDA	 ACCUM indexed	REGA
LDA	 ACCUM indexed	REGB
.sp
LDAA	 '#' expr
LDAA	 expr	DIRECT
LDAA	 expr	EXTENDED
LDAA	 indexed
.sp
LDAB	 '#' expr
LDAB	 expr	DIRECT
LDAB	 expr	EXTENDED
LDAB	 indexed
.sp
LDD	 '#' expr
LDD	 expr	DIRECT
LDD	 expr	EXTENDED
LDD	 indexed
.sp
LDS	 '#' expr
LDS	 expr	DIRECT
LDS	 expr	EXTENDED
LDS	 indexed
.sp
LDX	 '#' expr
LDX	 expr	DIRECT
LDX	 expr	EXTENDED
LDX	 indexed
.sp
LSL	 ACCUM	REGA
LSL	 ACCUM	REGB
LSL	 expr
LSL	 indexed
.sp
LSLA	
.sp
LSLB	
.sp
LSLD	
.sp
LSR	 ACCUM	REGA
LSR	 ACCUM	REGB
LSR	 expr
LSR	 indexed
.sp
LSRA	
.sp
LSRB	
.sp
LSRD	
.sp
MUL	
.sp
NEG	 ACCUM	REGA
NEG	 ACCUM	REGB
NEG	 expr
NEG	 indexed
.sp
NEGA	
.sp
NEGB	
.sp
NOP	
.sp
OIM	 '#' expr ',' expr
OIM	 '#' expr ',' indexed 
.sp
ORA	 ACCUM '#' expr	REGA
ORA	 ACCUM '#' expr	REGB
ORA	 ACCUM expr	REGA+DIRECT
ORA	 ACCUM expr	REGA+EXTENDED
ORA	 ACCUM expr	REGB+DIRECT
ORA	 ACCUM expr	REGB+EXTENDED
ORA	 ACCUM indexed	REGA
ORA	 ACCUM indexed	REGB
.sp
ORAA	 '#' expr
ORAA	 expr	DIRECT
ORAA	 expr	EXTENDED
ORAA	 indexed
.sp
ORAB	 '#' expr
ORAB	 expr	DIRECT
ORAB	 expr	EXTENDED
ORAB	 indexed
.sp
PSH	 ACCUM	REGA
PSH	 ACCUM	REGB
PSH	 INDEX
.sp
PSHA	
.sp
PSHB	
.sp
PSHX	
.sp
PUL	 ACCUM	REGA
PUL	 ACCUM	REGB
PUL	 INDEX
.sp
PULA	
.sp
PULB	
.sp
PULX	
.sp
ROL	 ACCUM	REGA
ROL	 ACCUM	REGB
ROL	 expr
ROL	 indexed
.sp
ROLA	
.sp
ROLB	
.sp
ROR	 ACCUM	REGA
ROR	 ACCUM	REGB
ROR	 expr
ROR	 indexed
.sp
RORA	
.sp
RORB	
.sp
RTI	
.sp
RTS	
.sp
SBA	
.sp
SBC	 ACCUM '#' expr	REGA
SBC	 ACCUM '#' expr	REGB
SBC	 ACCUM expr	REGA+DIRECT
SBC	 ACCUM expr	REGA+EXTENDED
SBC	 ACCUM expr	REGB+DIRECT
SBC	 ACCUM expr	REGB+EXTENDED
SBC	 ACCUM indexed	REGA
SBC	 ACCUM indexed	REGB
.sp
SBCA	 '#' expr
SBCA	 expr	DIRECT
SBCA	 expr	EXTENDED
SBCA	 indexed
.sp
SBCB	 '#' expr
SBCB	 expr	DIRECT
SBCB	 expr	EXTENDED
SBCB	 indexed
.sp
SEC	
.sp
SEI	
.sp
SEV	
.sp
SLP	
.sp
STA	 ACCUM expr	REGA+DIRECT
STA	 ACCUM expr	REGA+EXTENDED
STA	 ACCUM expr	REGB+DIRECT
STA	 ACCUM expr	REGB+EXTENDED
STA	 ACCUM indexed	REGA
STA	 ACCUM indexed	REGB
.sp
STAA	 expr	DIRECT
STAA	 expr	EXTENDED
STAA	 indexed
.sp
STAB	 expr	DIRECT
STAB	 expr	EXTENDED
STAB	 indexed
.sp
STD	 expr	DIRECT
STD	 expr	EXTENDED
STD	 indexed
.sp
STS	 expr	DIRECT
STS	 expr	EXTENDED
STS	 indexed
.sp
STX	 expr	DIRECT
STX	 expr	EXTENDED
STX	 indexed
.sp
SUB	 ACCUM '#' expr	REGA
SUB	 ACCUM '#' expr	REGB
SUB	 ACCUM expr	REGA+DIRECT
SUB	 ACCUM expr	REGA+EXTENDED
SUB	 ACCUM expr	REGB+DIRECT
SUB	 ACCUM expr	REGB+EXTENDED
SUB	 ACCUM indexed	REGA
SUB	 ACCUM indexed	REGB
.sp
SUBA	 '#' expr
SUBA	 expr	DIRECT
SUBA	 expr	EXTENDED
SUBA	 indexed
.sp
SUBB	 '#' expr
SUBB	 expr	DIRECT
SUBB	 expr	EXTENDED
SUBB	 indexed
.sp
SUBD	 '#' expr
SUBD	 expr	DIRECT
SUBD	 expr	EXTENDED
SUBD	 indexed
.sp
SWI	
.sp
TAB	
.sp
TAP	
.sp
TBA	
.sp
TIM	 '#' expr ',' expr
TIM	 '#' expr ',' indexed 
.sp
TPA	
.sp
TST	 ACCUM	REGA
TST	 ACCUM	REGB
TST	 expr
TST	 indexed
.sp
TSTA	
.sp
TSTB	
.sp
TSX	
.sp
TXS	
.sp
WAI	
.sp
XGDX	
.TE
.H 3 "Selection Criteria Keywords"
.VL 25 5 
.LI REGA
The A accumulator can be used for the instruction.
.LI REGB
The B accumulator can be used for the instruction.
.LI DIRECT
The instruction can use the direct addressing mode.  
The expression must have a value between 0 and 255 that is defined when the
instruction is processed in the input pass.
.LI EXTENDED
The instruction can use the extended addressing mode.
.LE
.H 3 "Notes"
.H 4 "Apostrophes"
The apostrophes in the syntax field are a notation used for the
parser generator and are not put in the assembler source statement.
.H 4 "Bit Numbers"
The bit number expression in the BSET, BCLR, BTGL, BTST operations has
to have value defined when the instruction is read in the first pass.
The value must be between 0 and 7.
.H 4 "Indexed Addressing"
The indexed addressing is represented in two ways.
Either "expression, X" or "X, expression" is
accepted by the assembler. 
.H 2 "Reserved Symbols"
.H 3 "Machine Dependent Reserved Symbols"
A
B
X
a
b
x
.H 3 "Standard Reserved Symbols"
AND
DEFINED
EQ
GE
GT
HIGH
LE
LOW
LT
MOD
NE
NOT
OR
SHL
SHR
XOR
and
defined
eq
ge
gt
high
le
low
lt
mod
ne
not
or
shl
shr
xor
.TC 1 1 7
