8051 Disassembler, notes on use.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
0. Command Line, Input Format
─────────────────────────────
This is a disassembler for the Intel 8051-family of processors.
It is currently set to read up to and including the 8052.

The typical conmmand line for this disassembler is:
	das <asm.hex >asm.s
The input file (read from standard input) is assumed to be in Intel Hex Format.
The output is placed in standard output (or in a file when redirection is used).

0a. Configuration/Entry Point File
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
A third file:
	entries
is used to specify:
∙	a list of entry points for das to use,
∙	definitions for addresses in the bit-register, byte-register spaces and code space.
If no entry points are listed, then the lowest address found in the hex input file will be used, instead.

It will recursively disassemble all the addresses ‟reachible” from those listed as entry points.
A sample entries file, input file and output file are provided with the software.
The format of each address in the file is (starting at column 1):
	HHHH<cr>
with the H's representing the digits of the address in hexadecimal.

In the file, one item per line may be listed:
∙	Each line may contain a comment, prefixed by / or ; and continuing to the end of line
∙	Each line may start with white space (spaces or tabs), which are ignored.
∙	Following initial whitespaces, a line may begin with a keyword,
	which consists of any sequence of non-white space characters (other than / or ;) beginning in b-e, B-E, x-y, X-Y,
	followed by list (in the case of b-e, B-E) separated from the keyword by whitespace (tabs or spaces).

The keywords are identified by their initials, which are:
∙	e or E (optional):	For entry point lines.
∙	b-d, B-D:		For definition lines, with:
	―	d or D: For addresses in ddata[] (including sfr registers)
	―	b or B: For addresses in bdata[]
	―	c or C: For addresses in cdata[]
∙	x-y, X-Y:		For configuration option lines, with:
	―	x or X: To suppress recursive descent to subroutine addresses.
	―	y or Y: To suppress the display of data segments.
∙	Hexadecimal numeral:	Treated as an entry point line with the keyword omitted.
	―	The hexadecimal numeral may be any numeral not beginning in b-e or B-E.
∙	All other initials are treated as the beginning of a comment, extending to the end of line, and are ignored.

An entry point line may list 1, 2 or more entry point addresses, each in hexadecimal,
with the hexadecimal numerals in the list separated from one another by non-hexadecimal characters (other than ; /).
Typically entry points are assigned to 0000, the starting address, and the address of each interrupt-handler that is used.
Examples:
∙	entry 0000, 0003, 000b, 0013, 001b, 0023, 002b
∙	0, 3, B, 13, 1B, 23, 2B

A definition line may list 1, 2 or more definitions, each consisting of a name followed by a numeric value.
∙	A name consists of any sequence of 1, 2 or more letters, digits and underscores, not beginning in a digit.
∙	Numerical values are all listed in hexadecimal.
∙	Each name is separated from its numeric value, and each definition from one another
	by 1, 2 or more characters other than ;, /, letters, digits or underscores.

Example: The initial configuration built into das.
This is what the built-in configuration could look like if it were supplied separately, instead, as part of ‟entries”.
// MCS-51 generic special function byte registers.
   data SP = 81, DPL = 82, DPH = 83, PSW = d0, ACC = e0, B = f0
   data PCON 87, TCON 88, TMOD 89, TL0 8a, TL1 8b, TH0 8c, TH1 8d
   data P0 80 P1 90 P2 a0 P3 b0
   data SCON = 98 SBUF = 99 IE = a8 IP = b8
// MCS-51 generic special function bit registers.
// TCON:
   bit IT0 = 88, IE0 = 89, IT1 = 8a, IE1 = 8b, TR0 = 8c, TF0 = 8d, TR1 = 8e, TF1 = 8f
// SCON:
   bit RI = 98, TI = 99, RB8 = 9a, TB8 = 9b, REN = 9c, SM2 = 9d, SM1 = 9e, SM0 = 9f
// IE:
   bit EX0 = a8, ET0 = a9, EX1 = aa, ET1 = ab, ES = ac, EA = af
// IP:
   bit PX0 = b8, PT0 = b9, PX1 = ba, PT1 = bb, PS = bc
// P3:
   bit RXD = b0, TXD = b1, INT0 = b2, INT1 = B3, T0 = b4, T1 = b5, WR = b6, RD = b7
// PSW:
   bit P = d0, OV = d2, RS0 = d3, RS1 = d4, F0 = d5, AC = d6, CY = d7
// 8052-specific byte registers.
   data T2CON = c8, RCAP2L = ca, RCAP2H = cb, TL2 = cc, TH2 = cd
// 8052-specific bit registers.
// P1:
   bit T2 = 90, T2EX = 91
// IE:
   bit ET2 = ad
// PI:
   bit PT2 = bd
// T2CON:
   bit CP_RL2 = 0xc8, C_T2 = 0xc9, TR2 = 0xca, EXEN2 = 0xcb, TCLK = 0xcc, RCLK = 0xcd, EXF2 = 0xce, TF2 = 0xcf

1. Output Format
────────────────
The output of the disassembler is not exactly re-assembleable.
When the disassembler searches for reachible segments of code,
it will fail to resolve indirect jumps (jmp @A + DPTR, jmp @A + PC),
and will fail to recognize virtual jumps created by manipulating the stack pointer, e.g.
	push DPL
	push DPH
	ret		;;; An indirect jump to the address pointed to by DPTR.
In addition, if the original program contained data tables, these would normally be passed by untouched.

The disassembler will regard anything in the allocated code space that was not accessible as being data.
If necessary, you will have to visually inspect the disassembled code for indirect jumps and stack pointer manipulations
to determine what addresses are being indirectly referenced.
Then you could add these addresses to the entry point list in the file ‟entries” and disassemble again.
This, in turn, may reveal additional indirect addresses,
so that there is an iterative process implied here to completely disassemble code.

For assistance, a list of locations where indirect jumps occur will be listed in the following format:
	;; Indirect jump at <Address>

In the sample program provided, there were no indirect jumps.
However, since the assembly-language software implements a multitasking kernel, it heavily manipulates the stack pointer.
Consquently, the addresses listed in the entries file are not just the starting address (0000), and interrupt handler(s) (0023),
but also derived addresses: 0067 (found on the first iteration), and 0131 (found on the second).

Also, any addresses referenced that lie outside the range of the Intel Hex Format file will be listed as external references.
These are listed in the following form:
	;; External reference at <PC> to <Address>

Data segments will be clearly marked as such, beginning with the header:
	;; DATA at <Address>
following which will be a hexadecimal listing of the ‟data” in the format illustrated below:
	34 aa ef 00 00 00 00 00 34 ee ff 00 00 00 00 00 |4       4       |
A list of up to 16 bytes in hexadecimal notation is generated,
and then between vertical bars is the list of corresponding ASCII characters.
Control characters and meta characters (those ranging from 128 to 255) are ‟blanked” out.
The character listing allows you to easily recognize embedded string constants wherever they occur.

Labels are generated for SFR's corresponding to the 8052 processor, and Bit labels are likewise generated.
These are listed in the tables SFRs, and Bits contained in the disassembler source,
and can be modified to suit whatever version of the 8051 you are using.

In the output, addresses are labeled in the format illustrated below:
	C3458
The initial letter indicates the number of times this address is referenced with the following key:
	B = 1 reference, C = 2 references, D = 3, E = 4, etc.
the next 4 items represent that actual address of the label in hexadecimal.

2. Errors
─────────
The disassembler will duly note where disassembled instructions overlap, or where it cannot further process input.
∙	No entry points listed on an entry points line.
		The indicated line in the configuraiton file contains an empty list of entry points.
∙	No definitions listed on a definitions line.
		The indicated line in the configuraiton file contains an empty list of definitions.
∙	No address listed for «Name».
		A definition on the indicated line lists a name, but no value.
∙	No entry points listed, using «Addr» as the starting address.
		The input file ‟entries” was not found, so the lowest address listed in the input hex file will be used, instead.
∙	«Name» is already defined.
		The indicated name, listed on a definitions line on the configuration file, has already been defined.
∙	Bad hexadecimal digit in input.
		The input file contained corrupt data.
∙	Bad format string, PC = HHHH.
		This should not appear.
		The compiled program or source file for the disassembler has been corrupted.
∙	Bad checksum.
		The check sum on a line in the input file failed to match: the line may be corrupt.
∙	Unexpected EOF
		The input file contained a portion not strictly in Intel Hex Format.
∙	Entry into ARG at <Address>.
		An entry point is accessing a point that has already been disassembled as the interior of an instruction.
∙	OP into ARG at <Address>.
		An attempt was made to disassemble an instruction starting at an address
		already contained in the interior of another instriction.
		The disassembler is generating overlapping instructions.
∙	ARG into OP at <Address>.
		An attempt was made to disassemble an argument to an instruction at an address
		already disassembled as the first byte of another instruction.
∙	ARG into ARG at <Address>.
		An attempt was made to disassemble an argument to an instruction at an address
		already disassembled as an argument of another instruction.

		The presence of this error indicates that something is wrong with your compiler or operating system,
		or the source file has been corrupted.
		Report this promptly to me, as well, if you should see this error.
∙	Too many addresses, PC = «Address»
		The number of pending points for the disassembler to process exceeded its capacity at the indicated address.

3. Support and Bug Reports
──────────────────────────
This software was produced based on the description of the binary coding of the 8051 processor supplied by Intel.

Since this was a hobby project mainly intended for myself and not for a wider audience,
you will be on your own in using this software.
Feedback may be provided here, through the archive site, currently on GitHub.
If you want to make upgrades, I encourage you to try your hand at it.
That's exactly why I'm distributing this package free.
The upgrade of the configuraition file format, for instance, came by way of request.
