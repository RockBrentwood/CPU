Frankenstein Cross-Assemblers, version 2.0.
Original author: Mark Zenier.
The constants used in intermediate file code generation
as the expression node operation value and the postfix expression operation

extag: Expression/Operator Types:
∙	PCCASE_CONS:	'U': constant number
∙	PCCASE_PROGC:	'P': program counter
∙	PCCASE_DEF:	'V': "defined" operator
∙	PCCASE_SYMB:	'S': symbol
∙	PCCASE_UN:	'_', 'N', 'H', 'Z': unary operators
∙	PCCASE_BIN:	'+', '-', '*', '/', '%', '{', '}', '|', '^', '&', '>', 'G', '<', 'L', '?', '=': binary operators
∙	―:	'Q', '~', '.', '$', 'X', '!', 'T', 'W', 'R', 'I', ';', 'r', 'x', 'y': stack operators

Byte Codes:
Constant Num:		Num 'U'		ExpNode(PCCASE_CONS, ―, 'V', ―, Num, ―)
Program Counter Lab:	Lab 'P'		ExpNode(PCCASE_PROGC, ―, 'P', ―, Lab, ―)
Defined Name:		Name 'V'	ExpNode(PCCASE_DEF, ―, 'U', ―, ―, Name)
Symbol Name:		Name 'S'	ExpNode(PCCASE_SYMB, ―, 'S', ―, ―, Name)
- A:			A '_'		ExpNode(PCCASE_UN, A, '_', ―, ―, ―)
~ A:			A 'N'		ExpNode(PCCASE_UN, A, 'N', ―, ―, ―)
high A:			A 'H'		ExpNode(PCCASE_UN, A, 'H', ―, ―, ―)
low A:			A 'Z'		ExpNode(PCCASE_UN, A, 'Z', ―, ―, ―)
A + B:			A B '+'		ExpNode(PCCASE_BIN, A, '+', B, ―, ―)
A - B:			A B '-'		ExpNode(PCCASE_BIN, A, '-', B, ―, ―)
A * B:			A B '*'		ExpNode(PCCASE_BIN, A, '*', B, ―, ―)
A / B:			A B '/'		ExpNode(PCCASE_BIN, A, '/', B, ―, ―)
A % B:			A B '%'		ExpNode(PCCASE_BIN, A, '%', B, ―, ―)
A << B:			A B '{'		ExpNode(PCCASE_BIN, A, '{', B, ―, ―)
A >> B:			A B '}'		ExpNode(PCCASE_BIN, A, '}', B, ―, ―)
A | B:			A B '|'		ExpNode(PCCASE_BIN, A, '|', B, ―, ―)
A ^ B:			A B '^'		ExpNode(PCCASE_BIN, A, '^', B, ―, ―)
A & B:			A B '&'		ExpNode(PCCASE_BIN, A, '&', B, ―, ―)
A > B:			A B '>'		ExpNode(PCCASE_BIN, A, '>', B, ―, ―)
A >= B:			A B 'G'		ExpNode(PCCASE_BIN, A, 'G', B, ―, ―)
A < B:			A B '<		ExpNode(PCCASE_BIN, A, '<', B, ―, ―)
A <= B:			A B 'L'		ExpNode(PCCASE_BIN, A, 'L', B, ―, ―)
A != B:			A B '?'		ExpNode(PCCASE_BIN, A, '?', B, ―, ―)
A = B:			A B '='		ExpNode(PCCASE_BIN, A, '=', B, ―, ―)
Current Location Addr:	Addr 'Q'
Duplicate A:		A '~'
Load A:			A '.'		Duplicate + Clear: like the C comma operator, but resets the value to 0.
Clear:			'$'
Clear all:		'X'
Pop A:			A '!'
Test error:		'T'
Width A:		A 'W'
SWidth A:		A 'R'
IWidth A:		A 'I'
Put unsigned8:		';'
Put signed7:		'r'
Put high unsigned16:	'x'
Put low unsigned16:	'y'
