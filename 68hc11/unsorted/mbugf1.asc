*
******************************************************************************
*
*        M I N I - D E B U G G E R    FUER  HC11F1 EXPANDED MODE       
*
*  E. WITTICH  21.11.1989
*
*
******************************************************************************
*
*ACHTUNG! 1. EXPANDED MODE AM HC11 EINSTELLEN (ALLE DIP-SWITCHES AUF OFF!)
*         2. STROMVERSORGUNG HERSTELLEN (CA. 6V WEGEN SCHUTZDIODE IN SERIE)
*         3. TERMINALPROGRAMM AM PC STARTEN (Z.B. PROCOMM)
*         4. MONITOR MELDET SICH MIT  *?
*			
* BAUDRATE IST BEI 8 MHZ CRYSTAL = 9600   
*
*
* DIESES PROGRAMM  ERLAUBT 3 BEFEHLE:
*							
*               * G XXXX GO TO ADDRESS
*               * D XXXX MEMORY DISPLAY
*               * M XXXX MEMORY CHANGE
*                   ENTER := NAECHSTE SPEICHERSTELLE DARSTELLEN
*                       R := VORHERIGE SPEICHERSTELLE DARSTELLEN
*                   PUNKT := ENDE MEMORY CHANGE   
*
* DREI TESTROUTINEN SIND UNTER FOLGENDEN ADRESSEN MIT G XXXX ZU STARTEN:
*
*        * G FE00  LOESCHT EEPROM IM BEREICH VON $4E00 - $4E1F
*        * G FE40  PROGRAMMIERT EEPROM AB $4E00 MIT $00 $55 $AA
*        * G FF00  LED BLINKT AN PORT A
*      
*******************************************************************************
*
*
*
*   Speicherbelegung:  256 Byte Programmlaenge,  2 Byte RAM, 8 BYTE STACK
*   $00 PROGRAMM START-ADRESSE
*   $0   RAM ARBEITSBEREICH 2 BYTE
*      
*        
*
* MEMORY DISPLAY: D AAAA (16-BYTE PRO ZEILE ANZEIGEN BIS MAX 256 BYTE)
*
* MEMORY CHANGE: M AAAA DD NN
*                  Mit diesem Befehl kann der Inhalt des Speichers gelesen bzw.
*                  modifiziert werden.
*                  Nach Erscheinen des Zeichens '* ' kann nach
*                  Eingabe des M-Befehles sofort die anzusprechende Hex-
*                  adresse eingegeben werden. Die Adresse muss immer 4 stellig
*                  eingegeben werden. Nach Adresseingabe wird sofort der
*                  aktuelle Inhalt dieser Speicherzelle angezeigt. Durch eine
*                  zweistellige Eingabe kann der aktuelle Inhalt dieser 
*                  Adresse ueberschrieben werden. Abschluss der Eingabe
*                  erfolgt immer mit der ENTER-Tasten (CR Taste).
*
*                  Bei Eingabe des Buchstaben 'R 'wird der vorhergehende
*                  Inhalt der Speicherzellen angezeigt.
*
*                  Bei Eingabe des Buchstaben 'W 'wird der aktuelle Inhalt
*                  der Speicherzellen angezeigt.
*
*                  Bei Eingabe des Buchstaben '. 'wird die Eingabe beendet.
*
*******************************************************************************
*             
*
*  INIT-WERTE FUER MC68HC11          
*
* SCI - REG.DEFINITIONEN
*
*
STACK  EQU    $FF      8 BYTE 
*
PORTA  EQU    $1000
PORTC  EQU    $1006
CSCTL  EQU    $105D
SPCR   EQU    $28
BPROT  EQU    $1035
PPROG  EQU    $103B

ACIAS  EQU    $102E    ACIA STATUS (CONTROL)
ACIAD  EQU    $102F    ACIA DATA
BAUD   EQU    $102B
SCCR1  EQU    $102C
SCCR2  EQU    $102D
SCSR   EQU    $2E      SCI STATUSREG.
SCDR   EQU    $2F      SCI DATA
HPRIO  EQU    $3C
MDA    EQU    $20
SMOD   EQU    $40
RDRF   EQU    $20      SCI READY
TDRE   EQU    $80
*
*    
* WORKING AREA       
XHI    EQU    0
XLOW   EQU    1
     
       ORG    $FE00
**********************************
***** INITIALISIERUNG NACH RESET 
**********************************
*      
ANFANG LDAA   #$1E     
       STAA   BPROT       PROTECTION FUER EEPROM AUFHEBEN
       
       LDY    #$1000      IO-ADDRESSE
       LDS    #STACK

* OPTION FUER 9600 BAUD
      BSET   SPCR,Y,#$20  OPTION - SET DWOM (PORTD OPEN-DRAIN)
      LDAA   #$30
      STAA   BAUD         9600 BAUD EINSTELLEN
      LDAA   #$0C
      STAA   SCCR2        SET TE RE
* PROGRAMM EINGABE LOOP
BEGMM  JSR    PDATA1      ? UND * AUSGEBEN
       BSR    INCH        PROGRAM RETURN
       CMPA   #'M'
       BEQ    MEMCHG      EXEC MEMORY CHANGE
       CMPA   #'G'
       BEQ    GOADR       GO TO ADRESSE
       CMPA   #'D'
       BNE    BEGMM 
       JMP    MDISP       MEMORY-DISPLAY

*
* G XXXX   -> JUMP TO PROGRAM
*
GOADR  BSR    BADDR
       JMP    0,X         GO TO ADRESSE
*
*     WAIT FOR INPUT FROM RS232
INCH   BRCLR  SCSR,Y,#RDRF,INCH
       LDAA   ACIAD
       JMP    OUTCH


*
* MEMORY CHANGE M AAAA DD NN
*
MEMCHG BSR    BADDR
CHANG  BSR    OUT2HM      SPEICHER INHALT ANZEIGEN
       JSR    OUTS        BLANK AUSGEBEN

CHA1   BSR    INCH
       CMPA   #$0D        CR? = ADR + 1         
       BEQ    LF
       CMPA   #'R'        EINGABE R = ADR.-1             
       BEQ    UA
       CMPA   #'.'        PUNKT
       BEQ    ENDC
       CMPA   #'W'
       BEQ    UA1         LETZTE ADRESSE WIEDERHOLEN
       BSR    INHEX2      EINGABE 2. HEX BYTE
       BSR    BYTE2       HEX ZEICHEN IN ACC
*  BYTE -> SPEICHER 
       STAA   0,X         A -> ((XHI,XLOW))
       CMPA   0,X         COMPARE -> ((XHI,XLOW))
       BEQ    CHA1        OK
ENDC   BRA    BEGMM

*
* ADR. -1
UA     DEX       
       DEX
*
* LF AUSGEBEN
LF     INX                ADR +1
UA1    BSR    PDATA3      AUSGABE: LF, CR, *
       BSR    OUT2HA      AKT.ADR.AUSGEBEN
       BRA    CHANG

*
* 2 BYTE HEX-ADRESSE EINGEBEN
BADDR  BSR    OUTS    BLANK AUSGEBEN
       BSR    BYTE    1. BYTE EINGEBEN
       STAA   XHI
       BSR    BYTE    2. BYTE EINGEBEN
       STAA   XLOW
       LDX    XHI     EINGABE-ADR. -> X
       RTS
*
* 1 BYTE HEX EINGEBEN
BYTE   BSR    INHEX
BYTE2  ASLA 
       ASLA 
       ASLA 
       ASLA 
       TAB          
       BSR    INHEX
       ABA       
       RTS

*
* AKT.ADRESSE ANZEIGEN
OUT2HA STX    XHI      AKT.ADR.ZWISCHENSPEICHERN
       LDAA   XHI
       BSR    OUT2H    AKT.ADRESSE ANZEIGEN
       LDAA   XLOW
       BRA    OUT2H
*
*INHALT DER AKT.ADRESSE AUSGEBEN: BLANK, ((XHI,XLOW))         
OUT2HM BSR    OUTS    LEERSCHRITT AUSGEBEN
       LDAA   0,X     ((XHI,XLOW)) -> A
*
* 1 BYTE IN HEX ANZEIGEN       
OUT2H  TAB         
       BSR    OUTHL
       TBA
       BRA    OUTHR
*
OUTHL  LSRA 
       LSRA 
       LSRA 
       LSRA 
OUTHR  ANDA   #$F
       ADDA   #$30
       CMPA   #$39
       BLS    OUTCH
       ADDA   #$7
* SENDE ZEICHEN -> RS232:  (A)=SENDE-ZEICHEN   
OUTCH  BRCLR  SCSR,Y,#TDRE,OUTCH   OUTPUT READY?
       STAA   ACIAD
       RTS

*
* INPUT 1 HEX BYTE
INHEX  JSR    INCH
INHEX2 SUBA   #$30
       CMPA   #$09
       BLS    IN1HG
       SUBA   #7
IN1HG  RTS

*
* AUSGABE  ? LF CR * BLANK
PDATA1 LDAA   #'?'
       BSR    OUTCH
PDATA3 LDAA   #10    LF
       BSR    OUTCH
PDATA2 LDAA   #13    CR
       BSR    OUTCH
       LDAA   #':'
       BSR    OUTCH
OUTS   LDAA   #$20  BLANK AUSGEBEN
       BRA    OUTCH


*
* MEMORY DISPLAY:  * D AAAA DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD DD
*
MDISP  BSR    BADDR   EINGABE ADRESSE
       BRA    DISP2
       
DISP1  BSR    OUT2HM  INHALT DER AKT.ADRESSE AUSGEBEN
       INX 
* ADR +1 AUSGEBEN
       INC    XLOW    ADR +1
       BEQ    DISP4   ENDE DES 256 BLOCK ERREICHT
       LDAA   XLOW
       ANDA   #$0F
       BNE    DISP1   256 BYTE BLOCK ANZEIGEN
DISP2  BSR    PDATA3  CR UND * AUSGEBEN
       BSR    OUT2HA  AKT.ADRESSE ANZEIGEN
       BRA    DISP1
*
DISP4  JMP   ENDC

*******************************
* EEPROM BULK ERASE
*******************************
        ORG  $FF00

	LDAB #$06
	STAB PPROG   BULK ERASE 32 BYTES
	STAA $4E00   DUMMY-WERT IN EEPROM SCHREIBEN
	LDAB #$07
	STAB PPROG   EEPGM ON
	JSR  DLY     WARTE  
        CLR  PPROG   BULK ERASE BEENDET
        JMP  ANFANG

*******************************
* EEPROM PROGRAMMIEREN
*******************************
        ORG  $FF40
	
	LDAB #$02     
	STAB PPROG   EELAT
	LDAA #$00    DATUM $00
	STAA $4E00   INS EEPROM SCHREIBEN
	LDAB #$03
	STAB PPROG   EEPGM
	JSR  DLY     WARTE
	CLR  PPROG   PROGRAMMIERUNG BEENDET
	
	LDAB #$02
	STAB PPROG   EELAT
	LDAA #$55    DATUM $55
	STAA $4E01   INS EEPROM SCHREIBEN
	LDAB #$03
	STAB PPROG   EEPGM
	JSR  DLY     WARTE
	CLR  PPROG   PROGRAMMIERUNG BEENDET
	
	LDAB #$02
	STAB PPROG   EELAT
	LDAA #$AA    DATUM $AA
	STAA $4E02   INS EEPROM SCHREIBEN
	LDAB #$03
	STAB PPROG   EEPGM
	JSR  DLY     WARTE
	CLR  PPROG   PROGRAMMIERUNG BEENDET
	JMP  ANFANG    
*
DLY     CLRA         160MS DELAY
        DECA
	BNE *-1
	INCB
	BNE DLY
	RTS
		
	 
*******************************
* LED  TEST ANZEIGE-PROGRAMM
*******************************
       ORG   $FF90
       
       LDAA  #$07
       STAA  CSCTL    INIT EPROM SIZE
       LDAA  #$FF
       STAA  PORTA+1  AUSGABE-RICHTUNG PORTA
       STAA  PORTC+1         "         PORTC
       
LOOP   INC   PORTA
       INC   PORTC
       LDAA  #$EE     DELAY
       DECA
       BNE   *-1
       BRA   LOOP       
                 

       ORG   $FFFE
       FDB   ANFANG
       END
       
