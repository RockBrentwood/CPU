*******************************************************************************
*                                  HC11FP                                     *
*                                                                             *
*                              Copyright 1986                                 *
*                                    by                                       *
*                              Gordon Doughman                                *
*                                                                             *
*       The source code for this floating point package for the MC68HC11      *
*       may be freely distributed under the rules of public domain. However   *
*       it is a copyrighted work and as such may not be sold as a product     *
*       or be included as part of a product for sale without the express      *
*       permission of the author. Any object code produced by the source      *
*       code may be included as part of a product for sale.                   *
*                                                                             *
*       If there are any questions or comments about the floating point       *
*       package please feel free to contact me.                               *
*                                                                             *
*                              Gordon Doughman                                *
*                              Motorola Semiconductor                         *
*                              3490 South Dixie Drive                         *
*                              Dayton, OH  45439                              *
*                              (513) 294-2231                                 *
*                                                                             *
*******************************************************************************
*                                                                             *
*                                 MATH11                                      *
*                                                                             *
*                  Revisions to FP11 floating point code                      *
*                  Modifications Copyright 1988, Scott Wagner                 *
*                                                                             *
*        The following improvements have been made to the HC11FP code:        *
*               1) Execution time and stack space requirements of the basic   *
*                  arithmetic operations (+-*/) have been reduced.            *
*               2) The efficiency of the trigonometric functions has been     *
*                  improved.                                                  *
*               3) New functions FLTATAN, FLTLN, FLTLGT, FLTETOX, FLT10TX     *
*                  and FLTXTOY have been added.                               *
*               4) The polynomial expansion routine POLYNOM is available to   *
*                  evaluate series of arbitrary order.  The coefficient table *
*                  supplied by the user determines the polynomial order.      *
*               5) All floating point numbers are now stored in memory in the *
*                  IEEE floating point format for compatibility with other    *
*                  compilers.                                                 *
*               6) All functions now signal errors by setting the Carry bit.  *
*                  If Carry is clear on return, contents of ACCA are          *
*                  indeterminate; if Carry is set, error code is in ACCA.     *
*               7) For compatibility with error returns, FLTCMP returns Z=1   *
*                  if FPACC1 == FPACC2, Z=0 if FPACC1 != FPACC2, and N=1 if   *
*                  FPACC1 < FPACC2, N=0 if FPACC1 >= FPACC2.  Note that this  *
*                  changes the conditional branch instructions following      *
*                  calls to FLTCMP in the routines in this package which use  *
*                  the FLTCMP routine.                                        *
*                                                                             *
*        These modifications to the HC11FP package are provided under the     *
*        rules of public domain stated above.  Please direct comments about   *
*        these modifications to:                                              *
*                                       Scott Wagner                          *
*                                       Rochester Instrument Systems          *
*                                       255 North Union Street                *
*                                       Rochester, New York 14605             *
*                                                                             *
*******************************************************************************
*
*               REVISION HISTORY:
*       1.0     02-11-88        Release to public domain of enhancements to
*                               Gordon Doughman's 68HC11 FP package.  S. Wagner
*       1.1     07-07-88        Corrected errors/anomalies in FLTCMP.  Made
*                               error returns more consistent.  S. Wagner
*       1.2     07-22-88        Corrected two digit exponent pointer error and
*                               mantissa conversion overflow error in ASCFLT.
*                               Addition involving zero or arguments with large
*                               exponent difference now returns no error and
*                               ACCA clear.  ASCFLT accepts 'E' or 'e' as
*                               exponent delimiter.  S. Wagner
*       1.3     09-21-88        Corrected error in storage format - storage is
*                               now true IEEE floating point format. Added new
*                               functions FLTABS (absolute value), FLTSGN
*                               (signum function), FLTMIN (negative). S. Wagner
*               02-19-92        EAS calculated 4MHz bus(16MHZ xtal) times 
*
         ORG    $0000
*
*
FPACC1EX RMB    1            FLOATING POINT ACCUMULATOR #1.
FPACC1MN RMB    3
MANTSGN1 RMB    1            MANTISSA SIGN FOR FPACC1 (0=+, FF=-).
FPACC2EX RMB    1            FLOATING POINT ACCUMULATOR #2.
FPACC2MN RMB    3
MANTSGN2 RMB    1            MANTISSA SIGN FOR FPACC2 (0=+, FF=-).
*
*
OVFERR   EQU    1           /* floating point overflow error */
UNFERR   EQU    1           /* floating point underflow error */
DIV0ERR  EQU    5           /* division by 0 error */
TOLGSMER EQU    6           /* number too large or small to convert to int. */
NSQRTERR EQU    7           /* tried to take the square root of negative # */
TAN90ERR EQU    8           /* TANgent of 90 degrees attempted */
LNNEGERR EQU    9           /* LOG or LN of negative number or 0 */
ACOSERR  EQU    10          /* Arc cosine not implemented */
ASINERR  EQU    11          /* Arc sine not implemented */
FLTFMTER EQU    12          /* floating point format error in ASCFLT */
*
*
******************************************************************************
*                                                                            *
*                        ASCII TO FLOATING POINT ROUTINE                     *
*                                                                            *
*       This routine will accept most any ASCII floating point format        *
*       and return a 32-bit floating point number.  The following are        *
*       some examples of legal ASCII floating point numbers.                 *
*                                                                            *
*       20.095                                                               *
*       0.125                                                                *
*       7.2984E10                                                            *
*       167.824E5                                                            *
*       5.9357E-7                                                            *
*       500                                                                  *
*                                                                            *
*       The floating point number returned is in "FPACC1".                   *
*                                                                            *
*                                                                            *
*       The exponent is biased by 127 to facilitate floating point           *
*       comparisons.  A pointer to the ASCII string is passed to the         *
*       routine in the X-register.                                           *
*                                                                            *
*                                                                            *
******************************************************************************
*
*
*
*        LOCAL VARIABLES (ON STACK POINTED TO BY Y)
*
EXPSIGN  EQU    0            EXPONENT SIGN (0=+, FF=-).
PWR10EXP EQU    1            POWER 10 EXPONENT.
*
*
         ORG    $C000        (TEST FOR EVB)
*
ASCFLT   EQU    *
         PSHX                SAVE POINTER TO ASCII STRING.
         JSR    PSHFPAC2     SAVE FPACC2.
         LDX    #0           PUSH ZEROS ON STACK TO INITIALIZE LOCALS.
         PSHX                ALLOCATE 2 BYTES FOR LOCALS.
         STX    FPACC1EX     CLEAR FPACC1.
         STX    FPACC1EX+2
         CLR    MANTSGN1     MAKE THE MANTISSA SIGN POSITIVE INITIALLY.
         TSY                 POINT TO LOCALS.
         LDX    6,Y          GET POINTER TO ASCII STRING.
ASCFLT1  LDAA   0,X          GET 1ST CHARACTER IN STRING.
         JSR    NUMERIC      IS IT A NUMBER.
         BCS    ASCFLT4      YES. GO PROCESS IT.
*
*        LEADING MINUS SIGN ENCOUNTERED?
*
ASCFLT2  CMPA   #'-'         NO. IS IT A MINUS SIGN?
         BNE    ASCFLT3      NO. GO CHECK FOR DECIMAL POINT.
         COM    MANTSGN1     YES. SET MANTISSA SIGN. LEADING MINUS BEFORE?
         INX                 POINT TO NEXT CHARACTER.
         LDAA   0,X          GET IT.
         JSR    NUMERIC      IS IT A NUMBER?
         BCS    ASCFLT4      YES. GO PROCESS IT.
*
*        LEADING DECIMAL POINT?
*

ASCFLT3  CMPA   #'.'          IS IT A DECIMAL POINT?
         BNE    ASCFLT5      NO. FORMAT ERROR.
         INX                 YES. POINT TO NEXT CHARACTER.
         LDAA   0,X          GET IT.
         JSR    NUMERIC      MUST HAVE AT LEAST ONE DIGIT AFTER D.P.
         BCC    ASCFLT5      GO REPORT ERROR.
         JMP    ASCFLT11     GO BUILD FRACTION.
*
*        FLOATING POINT FORMAT ERROR
*
ASCFLT5  INS                 DE-ALLOCATE LOCALS.
         INS
         JSR    PULFPAC2     RESTORE FPACC2.
         PULX                GET POINTER TO TERMINATING CHARACTER IN STRING.
         LDAA   #FLTFMTER    FORMAT ERROR.
         SEC                 SET ERROR FLAG.
         RTS                 RETURN.
*
*        PRE DECIMAL POINT MANTISSA BUILD
*
ASCFLT4  LDAA   0,X
         JSR    NUMERIC
         BCC    ASCFLT10
         JSR    ADDNXTD
         INX
         BCC    ASCFLT4
*
*        PRE DECIMAL POINT MANTISSA OVERFLOW
*
ASCFLT6  INC    FPACC1EX     INC FOR EACH DIGIT ENCOUNTERED PRIOR TO D.P.
         LDAA   0,X          GET NEXT CHARACTER.
         INX                 POINT TO NEXT.
         JSR    NUMERIC      IS IT S DIGIT?
         BCS    ASCFLT6      YES. KEEP BUILDING POWER 10 MANTISSA.
         CMPA   #'.'         NO. IS IT A DECIMAL POINT?
         BNE    ASCFLT7      NO. GO CHECK FOR THE EXPONENT.
*
*        ANY FRACTIONAL DIGITS ARE NOT SIGNIFIGANT
*
ASCFLT8  LDAA   0,X          GET THE NEXT CHARACTER.
         JSR    NUMERIC      IS IT A DIGIT?
         BCC    ASCFLT7      NO. GO CHECK FOR AN EXPONENT.
         INX                 POINT TO THE NEXT CHARACTER.
         BRA    ASCFLT8      FLUSH REMAINING DIGITS.
ASCFLT7  CMPA   #'E'         NO. IS IT THE EXPONENT?
         BEQ    ASCFLT13     YES. GO PROCESS IT.
         CMPA   #'e'         IS IT THE exponent?
         BEQ    ASCFLT13     YES. GO PROCESS IT.
         JMP    FINISH       NO. GO FINISH THE CONVERSION.
*
*        PROCESS THE EXPONENT
*
ASCFLT13 INX                 POINT TO NEXT CHARACTER.
         LDAA   0,X          GET THE NEXT CHARACTER.
         JSR    NUMERIC      SEE IF IT'S A DIGIT.
         BCS    ASCFLT9      YES. GET THE EXPONENT.
         CMPA   #'-'         NO. IS IT A MINUS SIGN?
         BEQ    ASCFLT15     YES. GO FLAG A NEGATIVE EXPONENT.
         CMPA   #'+'         NO. IS IT A PLUS SIGN?
         BEQ    ASCFLT16     YES. JUST IGNORE IT.
         BRA    ASCFLT5      NO. FORMAT ERROR.
ASCFLT15 COM    EXPSIGN,Y    FLAG A NEGATIVE EXPONENT. IS IT 1ST?
ASCFLT16 INX                 POINT TO NEXT CHARACTER.
         LDAA   0,X          GET NEXT CHARACTER.
         JSR    NUMERIC      IS IT A NUMBER?
         BCC    ASCFLT5      NO. FORMAT ERROR.
ASCFLT9  SUBA   #$30         MAKE IT BINARY.
         STAA   PWR10EXP,Y   BUILD THE POWER 10 EXPONENT.
         INX                 POINT TO NEXT CHARACTER.
         LDAA   0,X          GET IT.
         JSR    NUMERIC      IS IT NUMERIC?
         BCC    ASCFLT14     NO. GO FINISH UP THE CONVERSION.
         LDAB   PWR10EXP,Y   YES. GET PREVIOUS DIGIT.
         LSLB                MULT. BY 2.
         LSLB                NOW BY 4.
         ADDB   PWR10EXP,Y   BY 5.
         LSLB                BY 10.
         SUBA   #$30         MAKE SECOND DIGIT BINARY.
         ABA                 ADD IT TO FIRST DIGIT.
         STAA   PWR10EXP,Y
         INX                 POINT TO CHARACTER FOLLOWING EXPONENT
         CMPA   #38          IS THE EXPONENT OUT OF RANGE?
         BHI    ASCFLT5      YES. REPORT ERROR.
ASCFLT14 LDAA   PWR10EXP,Y   GET POWER 10 EXPONENT.
         TST    EXPSIGN,Y    WAS IT NEGATIVE?
         BPL    ASCFLT12     NO. GO ADD IT TO BUILT 10 PWR EXPONENT.
         NEGA
ASCFLT12 ADDA   FPACC1EX     FINAL TOTAL PWR 10 EXPONENT.
         STAA   FPACC1EX     SAVE RESULT.
         BRA    FINISH       GO FINISH UP CONVERSION.
*
*        PRE-DECIMAL POINT NON-DIGIT FOUND, IS IT A DECIMAL POINT?
*
ASCFLT10 CMPA   #'.'         IS IT A DECIMAL POINT?
         BNE    ASCFLT7      NO. GO CHECK FOR THE EXPONENT.
         INX                 YES. POINT TO NEXT CHARACTER.
*
*        POST DECIMAL POINT PROCESSING
*
ASCFLT11 LDAA   0,X          GET NEXT CHARACTER.
         JSR    NUMERIC      IS IT NUMERIC?
         BCC    ASCFLT7      NO. GO CHECK FOR EXPONENT.
         BSR    ADDNXTD      YES. ADD IN THE DIGIT.
         INX                 POINT TO THE NEXT CHARACTER.
         BCS    ASCFLT8      IF OVER FLOW, FLUSH REMAINING DIGITS.
         DEC    FPACC1EX     ADJUST THE 10 POWER EXPONENT.
         BRA    ASCFLT11     PROCESS ALL FRACTIONAL DIGITS.
*
*
*
ADDNXTD  LDAA   FPACC1MN     GET UPPER 8 BITS.
         STAA   FPACC2MN     COPY INTO FPAC2.
         LDD    FPACC1MN+1   GET LOWER 16 BITS OF MANTISSA.
         STD    FPACC2MN+1   COPY INTO FPACC2.
         LSLD                MULT. BY 2.
         ROL    FPACC1MN     OVERFLOW?
         BCS    ADDNXTD1     YES. DON'T ADD THE DIGIT IN.
         LSLD                MULT BY 4.
         ROL    FPACC1MN     OVERFLOW?
         BCS    ADDNXTD1     YES. DON'T ADD THE DIGIT IN.
         ADDD   FPACC2MN+1   BY 5.
         PSHA                SAVE A.
         LDAA   FPACC1MN     GET UPPER 8 BITS.
         ADCA   FPACC2MN     ADD IN UPPER 8 BITS, CARRY FROM LOWER 16 BITS.
         STAA   FPACC1MN     SAVE IT.
         PULA                RESTORE A.
         BCS    ADDNXTD1     OVERFLOW? IF SO DON'T ADD IT IN.
         LSLD                BY 10.
         ROL    FPACC1MN
         STD    FPACC1MN+1   SAVE THE LOWER 16 BITS.
         BCS    ADDNXTD1     OVERFLOW? IF SO DON'T ADD IT IN.
         LDAB   0,X          GET CURRENT DIGIT.
         SUBB   #$30         MAKE IT BINARY.
         CLRA                16-BIT.
         ADDD   FPACC1MN+1   ADD IT IN TO TOTAL.
         STD    FPACC1MN+1   SAVE THE RESULT.
         LDAA   FPACC1MN     GET UPPER 8 BITS.
         ADCA   #0           ADD IN POSSIBLE CARRY. OVERFLOW?
         BCS    ADDNXTD1     YES. COPY OLD MANTISSA FROM FPACC2.
         STAA   FPACC1MN     NO. EVERYHING OK.
         RTS                 RETURN.
ADDNXTD1 LDD    FPACC2MN+1   RESTORE THE ORIGINAL MANTISSA BECAUSE
         STD    FPACC1MN+1   OF OVERFLOW.
         LDAA   FPACC2MN
         STAA   FPACC1MN
         RTS                 RETURN.
*
*
*
*        NOW FINISH UP CONVERSION BY MULTIPLYING THE RESULTANT MANTISSA
*        BY 10 FOR EACH POSITIVE POWER OF 10 EXPONENT RECIEVED OR BY .1
*        (DIVIDE BY 10) FOR EACH NEGATIVE POWER OF 10 EXPONENT RECIEVED.
*
*
FINISH   EQU    *
         STX    6,Y          SAVE POINTER TO TERMINATING CHARACTER IN STRING.
         LDX    #FPACC1EX    POINT TO FPACC1.
         JSR    CHCK0        SEE IF THE NUMBER IS ZERO.
         BEQ    FINISH3      QUIT IF IT IS.
         LDAA   FPACC1EX     GET THE POWER 10 EXPONENT.
         STAA   PWR10EXP,Y   SAVE IT.
         LDAA   #$7E+24      SET UP INITIAL EXPONENT (# OF BITS + BIAS).
         STAA   FPACC1EX
         JSR    FPNORM       GO NORMALIZE THE MANTISSA.
         TST    PWR10EXP,Y   IS THE POWER 10 EXPONENT POSITIVE OR ZERO?
         BEQ    FINISH3      IT'S ZERO, WE'RE DONE.
         BPL    FINISH1      IT'S POSITIVE MULTIPLY BY 10.
         LDX    #CONSTP1     NO. GET CONSTANT .1 (DIVIDE BY 10).
         JSR    GETFPAC2     GET CONSTANT INTO FPACC2.
         NEG    PWR10EXP,Y   MAKE THE POWER 10 EXPONENT POSITIVE.
         BRA    FINISH2      GO DO THE MULTIPLIES.
FINISH1  LDX    #CONST10     GET CONSTANT '10' TO MULTIPLY BY.
         JSR    GETFPAC2     GET CONSTANT INTO FPACC2.
FINISH2  JSR    FLTMUL       GO MULTIPLY FPACC1 BY FPACC2, RESULT IN FPACC1.
         DEC    PWR10EXP,Y   DECREMENT THE POWER 10 EXPONENT.
         BNE    FINISH2      GO CHECK TO SEE IF WE'RE DONE.
FINISH3  INS                 DE-ALLOCATE LOCALS.
         INS
         JSR    PULFPAC2     RESTORE FPACC2.
         PULX                GET POINTER TO TERMINATING CHARACTER IN STRING.
         RTS                 RETURN WITH NUMBER IN FPACC1.
*
*
NUMERIC  EQU    *
         CMPA   #'0'         IS IT LESS THAN AN ASCII 0?
         BLO    NUMERIC1     YES. NOT NUMERIC.
         CMPA   #'9'         IS IT GREATER THAN AN ASCII 9?
         BHI    NUMERIC1     YES. NOT NUMERIC.
         SEC                 IT WAS NUMERIC. SET THE CARRY.
         RTS                 RETURN.
NUMERIC1 CLC                 NON-NUMERIC CHARACTER. CLEAR THE CARRY.
         RTS                 RETURN.
*
FPNORM   EQU    *
         LDX    #FPACC1EX    POINT TO FPACC1.
         BSR    CHCK0        CHECK TO SEE IF IT'S 0.
         BEQ    FPNORM3      YES. JUST RETURN.
         TST    FPACC1MN     IS THE NUMBER ALREADY NORMALIZED?
         BMI    FPNORM3      YES. JUST RETURN..
FPNORM1  LDD    FPACC1MN+1   GET THE LOWER 16 BITS OF THE MANTISSA.
FPNORM2  DEC    FPACC1EX     DECREMENT THE EXPONENT FOR EACH SHIFT.
         BEQ    FPNORM4      EXPONENT WENT TO 0. UNDERFLOW.
         LSLD                SHIFT THE LOWER 16 BITS.
         ROL    FPACC1MN     ROTATE THE UPPER 8 BITS. NUMBER NORMALIZED?
         BPL    FPNORM2      NO. KEEP SHIFTING TO THE LEFT.
         STD    FPACC1MN+1   PUT THE LOWER 16 BITS BACK INTO FPACC1.
FPNORM3  CLC                 SHOW NO ERRORS.
         RTS                 YES. RETURN.
FPNORM4  SEC                 FLAG ERROR.
         RTS                 RETURN.
*
CHCK0    EQU    *            CHECKS FOR ZERO IN FPACC POINTED TO BY X.
         PSHB                SAVE D.
         PSHA
         LDD    0,X          GET FPACC EXPONENT & HIGH 8 BITS.
         BNE    CHCK01       NOT ZERO. RETURN.
         LDD    2,X          CHECK LOWER 16 BITS.
CHCK01   PULA                RESTORE D.
         PULB
         RTS                 RETURN WITH CC SET.
*
CONSTP1  FCB    $3D,$CC,$CC,$CD         0.1 DECIMAL
CONST10  FCB    $41,$20,$00,$00         10.0 DECIMAL
*
*
FLTMOD   EQU    *            FLOATING POINT MODULUS
         JSR    FLTDIV       DO DIVISION
         JSR    PSHFPAC2     SAVE ARGUMENT
         JSR    INTFRAC      FIND FRACTIONAL PART
         JSR    PULFPAC2     RECOVER ARGUMENT
*                            FALL THROUGH TO MULTIPLY
*
******************************************************************************
*                                                                            *
*                      FPMULT: FLOATING POINT MULTIPLY                       *
*                                                                            *
*       THIS FLOATING POINT MULTIPLY ROUTINE MULTIPLIES "FPACC1" BY          *
*       "FPACC2" AND PLACES THE RESULT IN TO FPACC1. FPACC2 REMAINS          *
*       UNCHANGED.                                                           *
*                          WORST CASE = 480 CYCLES = 240 uS @ 2MHz           *
*                          WORST CASE = 480 CYCLES = 120 uS @ 4MHz           *
*                                                                            *
******************************************************************************
*
*
FLTMUL   EQU    *
         TST    FPACC1EX     CHECK TO SEE IF FPACC1 IS ZERO.
         BEQ    FPMULT3      IT IS. ANSWER IS 0.
         TST    FPACC2EX     CHECK TO SEE IF FPACC2 IS ZERO.
         BNE    FPMULT8      IT IS NOT. GO DO MULTIPLY
FPMULT3  LDD    #0           ZERO RESULT
         STAA   MANTSGN1
         STD    FPACC1EX
         STD    FPACC1MN+1
         RTS                 RETURN.
FPMULT8  LDAA   MANTSGN1     GET FPACC1 EXPONENT.
         EORA   MANTSGN2     SET THE SIGN OF THE RESULT.
         STAA   MANTSGN1     SAVE THE SIGN OF THE RESULT.
         LDAA   FPACC1EX     GET FPACC1 EXPONENT.
         ADDA   FPACC2EX     ADD IT TO FPACC2 EXPONENT.
         BPL    FPMULT1      IF RESULT IS MINUS AND
         BCC    FPMULT2      THE CARRY IS SET THEN:
RTNMAX   LDAA   #OVFERR      OVERFLOW ERROR.
RTNDIV0  LDX    #$FFFF       MAXIMUM MAGNITUDE RESULT
         BRA    FPMULT7      DO IT AND RETURN.
FPMULT1  BCS    FPMULT2      IF RESULT IS PLUS & THE CARRY IS SET THEN ALL OK.
RTNZERO  LDAA   #UNFERR      ELSE UNDERFLOW ERROR OCCURED.
         LDX    #0           ZERO RESULT
         STX    FPACC1MN+2   THIS CLEARS MANTSGN1 BYTE
FPMULT7  STX    FPACC1EX
         STX    FPACC1MN+1
         SEC                 FLAG ERROR.
         RTS                 RETURN.
FPMULT2  ADDA   #$82         ADD BIAS BACK IN THAT WE LOST.
         STAA   FPACC1EX     SAVE THE NEW EXPONENT.
         LDX    #0
         PSHX                CREATE PARTIAL PRODUCT REGISTER AND COUNTER.
         PSHX
         TSX                 POINT TO THE VARIABLES.
         JSR    UMULT        GO MULTIPLY THE "INTEGER" MANTISSAS.
         TST    0,X          DOES RESULT NEED TO BE NORMALIZED?
         BMI    FPMROUND     NO - GO ROUND RESULT
         ROL    3,X          FIRST NORMALIZE RESULT
         ROL    2,X
         ROL    1,X
         ROL    0,X
         DEC    FPACC1EX     NOW DECREMENT EXPONENT
FPMROUND TST    3,X          CHECK MSB OF BYTE 4 (TO BE DISCARDED LATER)
         BPL    FPMULT4      NO ROUNDING NECESSARY
         LDAA   2,X          ROUND LSB UP
         INCA                INCREMENT RESULT LSB
         STAA   2,X          PUT LSB BACK
         BNE    FPMULT4      IF NO CARRY TO RESULT BYTES 1 AND 2
         LDAB   #1           SET D REGISTER TO 1 (ACCA IS ALREADY 0)
         ADDD   0,X          INCREMENT BYTES 1 AND 2
         BCC    FPMULT5      NO OVERFLOW FROM BYTES 1 AND 2
         RORA                RESULT CHANGES FROM $7FFFFF TO $800000
         INC    FPACC1EX     EXPONENT INCREMENTED (BACK TO WHERE IT WAS)
FPMULT5  STD    0,X          PUT BYTES 1 AND 2 BACK
FPMULT4  PULX                RETRIEVE BYTES 1 AND 2
         STX    FPACC1MN     STORE IN MANTISSA HIGH BYTES
         PULA                RETRIEVE BYTE 3 (LSB)
         STAA   FPACC1MN+2   STORE IN MANTISSA LOW BYTE
         INS                 DISCARD BYTE 4
         TST    FPACC1EX     WAS THERE AN UNDERFLOW ERROR?
         BEQ    RTNZERO      YES. RETURN ERROR.
         CLRB                SHOW NO ERRORS.
         RTS
*
*
UMULT    EQU    *
         LDAA   FPACC2MN+2   GET MULTIPLIER LSB
         LDAB   FPACC1MN+2   GET MULTIPLICAND LSB
         MUL
         STAA   1,X          TEMPORARILY SAVE RESULT MSB; DISCARD LSB (BYTE 6)
         LDAA   FPACC2MN+1   GET MULTIPLIER NSB
         LDAB   FPACC1MN+2   GET MULTIPLICAND LSB
         MUL
         ADDD   0,X          ADD IN LAST PARTIAL RESULT
         STD    0,X          TEMPORARILY SAVE RESULT
         LDAA   FPACC2MN+2   GET MULTIPLIER LSB
         LDAB   FPACC1MN+1   GET MULTIPLICAND NSB
         MUL
         ADDD   0,X          ADD IN LAST PARTIAL RESULT
         STAA   3,X          SAVE PARTIAL PRODUCT BYTE 4; DISCARD LSB (BYTE 5)
         BCC    UMULT1       IF NO CARRY O
******************************************************************************
*									     *
*                                                                            *
*                         SQUARE ROOT SUBROUTINE                             *
*                                                                            *
*        This routine is used to calculate the square root of the floating   *
*        point number in FPACC1.  If the number in FPACC1 is negative an     *
*        error is returned.                                                  *
*                                                                            *
*                          WORSE CASE = 16354 CYCLES = 8177   uS @ 2MHz      *
*                          WORSE CASE = 16354 CYCLES = 4088.5 uS @ 4MHz      *
*                                                                            *
******************************************************************************
*
*
FLTSQR   EQU    *
         LDX    #FPACC1EX    POINT TO FPACC1.
         JSR    CHCK0        IS IT ZERO?
         BNE    FLTSQR1      NO. CHECK FOR NEGATIVE.
         RTS                 YES. RETURN.
FLTSQR1  TST    MANTSGN1     IS THE NUMBER NEGATIVE?
         BPL    FLTSQR2      NO. GO TAKE ITS SQUARE ROOT.
         LDAA   #NSQRTERR    YES. ERROR.
         SEC                 FLAG ERROR.
         RTS                 RETURN.
FLTSQR2  JSR    PSHFPAC2     SAVE FPACC2.
         LDAA   #4           GET ITERATION LOOP COUNT.
         PSHA                SAVE IT ON THE STACK.
         LDX    FPACC1MN+1   SAVE INITIAL NUMBER.
         PSHX
         LDX    FPACC1EX
         PSHX
         TSY                 POINT TO IT.
         BSR    TFR1TO2      TRANSFER FPACC1 TO FPACC2.
         LDAA   FPACC2EX     GET FPACC1 EXPONENT.
         SUBA   #$7E         REMOVE BIAS FROM EXPONENT.
         INCA                COMPENSATE FOR ODD EXPONENTS (GIVES CLOSER GUESS)
         BPL    FLTSQR3      IF NUMBER >1 DIVIDE EXPONENT BY 2 & ADD BIAS.
         LSRA                IF <1 JUST DIVIDE IT BY 2.
         BRA    FLTSQR4      GO CALCULATE THE SQUARE ROOT.
FLTSQR3  LSRA                DIVIDE EXPONENT BY 2.
         ADDA   #$7E         ADD BIAS BACK IN.
FLTSQR4  STAA   FPACC2EX     SAVE EXPONENT/2.
FLTSQR5  JSR    FLTDIV       DIVIDE THE ORIGINAL NUMBER BY THE GUESS.
         JSR    FLTADD       ADD THE "GUESS" TO THE QUOTIENT.
         DEC    FPACC1EX     DIVIDE THE RESULT BY 2 TO PRODUCE A NEW GUESS.
         BSR    TFR1TO2      PUT THE NEW GUESS INTO FPACC2.
         LDD    0,Y          GET THE ORIGINAL NUMBER.
         STD    FPACC1EX     PUT IT BACK IN FPACC1.
         LDD    2,Y          GET MANTISSA LOWER 16 BITS.
         STD    FPACC1MN+1
         DEC    4,Y          BEEN THROUGH THE LOOP 4 TIMES?
         BNE    FLTSQR5      NO. KEEP GOING.
         LDD    FPACC2EX     THE FINAL GUESS IS THE ANSWER.
         STD    FPACC1EX     PUT IT IN FPACC1.
         LDD    FPACC2MN+1
         STD    FPACC1MN+1
         PULX                GET RID OF ORIGINAL NUMBER.
         PULX
         INS                 GET RID OF LOOP COUNT VARIABLE.
         JSR    PULFPAC2     RESTORE FPACC2.
         CLRB                NO ERRORS.
         RTS
*
*
TFR1TO2  EQU    *
         LDD    FPACC1EX     GET FPACC1 EXPONENT & HIGH 8 BIT OF MANTISSA.
         STD    FPACC2EX     PUT IT IN FPACC2.
         LDD    FPACC1MN+1   GET FPACC1 LOW 16 BITS OF MANTISSA.
         STD    FPACC2MN+1   PUT IT IN FPACC2.
         LDAA   MANTSGN1     TRANSFER THE SIGN.
         STAA   MANTSGN2
         RTS                 RETURN.
*
*

