.HM A 1 1 1 1 1 1
.H 1 "Appendix for as7000 Frankenstein Assembler"
.H 2 "Pseudo Operations"
.H 3 "Standard Pseudo Operation Mnemonics"
.VL 40 5 1
.LI "End"
END
.LI "File Inclusion"
INCL
INCLUDE
.LI "If"
IF
.LI "Else"
ELSE
.LI "End If"
ENDI
.LI "Equate"
EQU
.LI "Set"
SET
.LI "Org"
ORG
.LI "Reserve Memory"
RESERVE
RMB
.LI "Define Byte Data"
BYTE
DB
FCB
.LI "Define Word Data"
DW
FDB
WORD
.LI "Define String Data"
FCC
STRING
.LI "Define Character Set Translation"
CHARSET
.LI "Define Character Value"
CHARDEF
CHD
.LI "Use Character Translation"
CHARUSE
.LE
.H 2 "Instructions"
.H 3 "Differences with the TI defined Syntax"
.DS
.TS
;
l l.
TI syntax	as7000 syntax
.sp
op % immediate , register	op # immediate , register
op % immed , register, jump dest	op # immed , register , jump dest
op @ label	op label
op @ label ( B )	op expr ( B )
op *register	op [ register ]
movd % immed ( B ) , register	movd # immed (B), register
.sp
Constants
.sp
?0101010	%01010101
>89ab	$89ab
''''	"'"
.sp
Comments
.sp
after the last operand	everything following a semicolon
.sp
Symbols
.sp
R0-R255	equ with value between 0 and $ff
R0-R255	0 to 255, Not Recommended !
P0-P255	equ with value between $100 and $1ff
P0-P255	256 to 511, Not Recommended !
.sp
.TE
.DE
.H 3 "Instruction List"
.TS H
;
l l l.
Opcode	Syntax	Selection Criteria
.sp
.TH
.sp
ADC	 '#' expr ',' expr
ADC	 '#' expr ',' expr	DSTA
ADC	 '#' expr ',' expr	DSTB
ADC	 expr ',' expr
ADC	 expr ',' expr	DSTA
ADC	 expr ',' expr	DSTB
ADC	 expr ',' expr	SRCB DSTA
.sp
ADD	 '#' expr ',' expr
ADD	 '#' expr ',' expr	DSTA
ADD	 '#' expr ',' expr	DSTB
ADD	 expr ',' expr
ADD	 expr ',' expr	DSTA
ADD	 expr ',' expr	DSTB
ADD	 expr ',' expr	SRCB DSTA
.sp
AND	 '#' expr ',' expr
AND	 '#' expr ',' expr	DSTA
AND	 '#' expr ',' expr	DSTB
AND	 expr ',' expr
AND	 expr ',' expr	DSTA
AND	 expr ',' expr	DSTB
AND	 expr ',' expr	SRCB DSTA
.sp
ANDP	 '#' expr ',' expr
ANDP	 expr ',' expr	SRCA
ANDP	 expr ',' expr	SRCB
.sp
BR	 '[' expr ']'
BR	 expr '(' REG ')'	SRCB
BR	 expr
.sp
BTJO	 '#' expr ',' expr ',' expr
BTJO	 '#' expr ',' expr ',' expr	DSTA
BTJO	 '#' expr ',' expr ',' expr	DSTB
BTJO	 expr ',' expr ',' expr
BTJO	 expr ',' expr ',' expr	DSTA
BTJO	 expr ',' expr ',' expr	DSTB
BTJO	 expr ',' expr ',' expr	SRCB DSTA
.sp
BTJOP	 '#' expr ',' expr ',' expr
BTJOP	 expr ',' expr ',' expr	SRCA
BTJOP	 expr ',' expr ',' expr	SRCB
.sp
BTJZ	 '#' expr ',' expr ',' expr
BTJZ	 '#' expr ',' expr ',' expr	DSTA
BTJZ	 '#' expr ',' expr ',' expr	DSTB
BTJZ	 expr ',' expr ',' expr
BTJZ	 expr ',' expr ',' expr	DSTA
BTJZ	 expr ',' expr ',' expr	DSTB
BTJZ	 expr ',' expr ',' expr	SRCB DSTA
.sp
BTJZP	 '#' expr ',' expr ',' expr
BTJZP	 expr ',' expr ',' expr	SRCA
BTJZP	 expr ',' expr ',' expr	SRCB
.sp
CALL	 '[' expr ']'
CALL	 expr '(' REG ')'	SRCB
CALL	 expr
.sp
CLR	 expr
CLR	 expr	DSTA
CLR	 expr	DSTB
.sp
CLRC
.sp
CMP	 '#' expr ',' expr
CMP	 '#' expr ',' expr	DSTA
CMP	 '#' expr ',' expr	DSTB
CMP	 expr ',' expr
CMP	 expr ',' expr	DSTA
CMP	 expr ',' expr	DSTB
CMP	 expr ',' expr	SRCB DSTA
.sp
CMPA	 '[' expr ']'
CMPA	 expr '(' REG ')'	SRCB
CMPA	 expr
.sp
DAC	 '#' expr ',' expr
DAC	 '#' expr ',' expr	DSTA
DAC	 '#' expr ',' expr	DSTB
DAC	 expr ',' expr
DAC	 expr ',' expr	DSTA
DAC	 expr ',' expr	DSTB
DAC	 expr ',' expr	SRCB DSTA
.sp
DEC	 expr
DEC	 expr	DSTA
DEC	 expr	DSTB
.sp
DECD	 expr
DECD	 expr	DSTA
DECD	 expr	DSTB
.sp
DINT
.sp
DJNZ	 expr ',' expr
DJNZ	 expr ',' expr	DSTA
DJNZ	 expr ',' expr	DSTB
.sp
DSB	 '#' expr ',' expr
DSB	 '#' expr ',' expr	DSTA
DSB	 '#' expr ',' expr	DSTB
DSB	 expr ',' expr
DSB	 expr ',' expr	DSTA
DSB	 expr ',' expr	DSTB
DSB	 expr ',' expr	SRCB DSTA
.sp
EINT
.sp
IDLE
.sp
INC	 expr
INC	 expr	DSTA
INC	 expr	DSTB
.sp
INV	 expr
INV	 expr	DSTA
INV	 expr	DSTB
.sp
JC	 expr
.sp
JEQ	 expr
.sp
JGE	 expr
.sp
JGT	 expr
.sp
JHS	 expr
.sp
JL	 expr
.sp
JLT	 expr
.sp
JMP	 expr
.sp
JN	 expr
.sp
JNC	 expr
.sp
JNE	 expr
.sp
JNZ	 expr
.sp
JP	 expr
.sp
JPZ	 expr
.sp
JZ	 expr
.sp
LDA	 '[' expr ']'
LDA	 expr '(' REG ')'	SRCB
LDA	 expr
.sp
LDSP
.sp
MOV	 '#' expr ',' expr
MOV	 '#' expr ',' expr	DSTA
MOV	 '#' expr ',' expr	DSTB
MOV	 expr ',' expr
MOV	 expr ',' expr	DSTA
MOV	 expr ',' expr	DSTB
MOV	 expr ',' expr	SRCA
MOV	 expr ',' expr	SRCA DSTB
MOV	 expr ',' expr	SRCB
MOV	 expr ',' expr	SRCB DSTA
.sp
MOVD	 '#' expr '(' REG ')' ',' expr
MOVD	 '#' expr ',' expr
MOVD	 expr ',' expr
.sp
MOVP	 '#' expr ',' expr
MOVP	 expr ',' expr	DSTA
MOVP	 expr ',' expr	DSTB
MOVP	 expr ',' expr	SRCA
MOVP	 expr ',' expr	SRCB
.sp
MPY	 '#' expr ',' expr
MPY	 '#' expr ',' expr	DSTA
MPY	 '#' expr ',' expr	DSTB
MPY	 expr ',' expr
MPY	 expr ',' expr	DSTA
MPY	 expr ',' expr	DSTB
MPY	 expr ',' expr	SRCB DSTA
.sp
NOP
.sp
OR	 '#' expr ',' expr
OR	 '#' expr ',' expr	DSTA
OR	 '#' expr ',' expr	DSTB
OR	 expr ',' expr
OR	 expr ',' expr	DSTA
OR	 expr ',' expr	DSTB
OR	 expr ',' expr	SRCB DSTA
.sp
ORP	 '#' expr ',' expr
ORP	 expr ',' expr	SRCA
ORP	 expr ',' expr	SRCB
.sp
POP	  STATUS
POP	 expr
POP	 expr	DSTA
POP	 expr	DSTB
.sp
PUSH	  STATUS
PUSH	 expr
PUSH	 expr	DSTA
PUSH	 expr	DSTB
.sp
RETI
.sp
RETS
.sp
RL	 expr
RL	 expr	DSTA
RL	 expr	DSTB
.sp
RLC	 expr
RLC	 expr	DSTA
RLC	 expr	DSTB
.sp
RR	 expr
RR	 expr	DSTA
RR	 expr	DSTB
.sp
RRC	 expr
RRC	 expr	DSTA
RRC	 expr	DSTB
.sp
SBB	 '#' expr ',' expr
SBB	 '#' expr ',' expr	DSTA
SBB	 '#' expr ',' expr	DSTB
SBB	 expr ',' expr
SBB	 expr ',' expr	DSTA
SBB	 expr ',' expr	DSTB
SBB	 expr ',' expr	SRCB DSTA
.sp
SETC
.sp
STA	 '[' expr ']'
STA	 expr '(' REG ')'	SRCB
STA	 expr
.sp
STSP
.sp
SUB	 '#' expr ',' expr
SUB	 '#' expr ',' expr	DSTA
SUB	 '#' expr ',' expr	DSTB
SUB	 expr ',' expr
SUB	 expr ',' expr	DSTA
SUB	 expr ',' expr	DSTB
SUB	 expr ',' expr	SRCB DSTA
.sp
SWAP	 expr
SWAP	 expr	DSTA
SWAP	 expr	DSTB
.sp
TRAP	 expr
.sp
TSTA
.sp
TSTB
.sp
XCHB	 expr
XCHB	 expr	DSTA
XCHB	 expr	DSTB
.sp
XOR	 '#' expr ',' expr
XOR	 '#' expr ',' expr	DSTA
XOR	 '#' expr ',' expr	DSTB
XOR	 expr ',' expr
XOR	 expr ',' expr	DSTA
XOR	 expr ',' expr	DSTB
XOR	 expr ',' expr	SRCB DSTA
.sp
XORP	 '#' expr ',' expr
XORP	 expr ',' expr	SRCA
XORP	 expr ',' expr	SRCB
.TE
.H 3 "Selection Criteria Keywords"
.VL 25 5
.LI DSTA
The instruction will use a short form if the A register is used as the
destination register.
.LI DSTB
The instruction will use a short form if the B register is used as the
destination register.
.LI SRCA
The instruction will use a short form if the A register is used as the
source register.
.LI SRCB
The instruction will use a short form if the B register is used as the
source register.
.LE
.H 3 "Apostrophes"
The apostrophes in the syntax field are a notation used for the
parser generator and are not put in the assembler source statement.
.H 2 "Notes"
.H 3 "Reserved Symbols"
.H 4 "Machine Dependent Reserved Symbols"
A
B
ST
a
b
st
.H 4 "Standard Reserved Symbols"
AND
DEFINED
EQ
GE
GT
HIGH
LE
LOW
LT
MOD
NE
NOT
OR
SHL
SHR
XOR
and
defined
eq
ge
gt
high
le
low
lt
mod
ne
not
or
shl
shr
xor
.TC 1 1 7
