.HM A 1 1 1 1 1 1
.H 1 "Appendix for as6805 Frankenstein Assembler"
.H 2 "Pseudo Operations"
.H 3 "Standard Pseudo Operation Mnemonics"
.VL 40 5 1
.LI "End"
END
.LI "File Inclusion"
INCL
INCLUDE
.LI "If"
IF
.LI "Else"
ELSE
.LI "End If"
ENDI
.LI "Equate"
EQU
.LI "Set"
SET
.LI "Org"
ORG
.LI "Reserve Memory"
RESERVE
RMB
.LI "Define Byte Data"
BYTE
DB
FCB
.LI "Define Word Data"
DW
FDB
WORD
.LI "Define String Data"
FCC
STRING
.LI "Define Character Set Translation"
CHARSET
.LI "Define Character Value"
CHARDEF
CHD
.LI "Use Character Translation"
CHARUSE
.LE
.H 3 "Machine Dependent Pseudo Operations"
.H 4 "Instruction Set Selection"
.DS I N
CPU string
.DE
The instruction set can be specified in the source file with the CPU
pseudooperation.
The string, delimited by quotes or apostrophes, is scanned for a
substring which selects which instruction set is used.
When the program is invoked, this operation is performed on the name of
the program, then the -p optional arguement, if any, and then any CPU
statements.
The last one selects which subset of the instructions the assembler will
accept.
The instruction set can be changed at any place in the source file.
.VL 30 5 1
.LI "Instruction Set"
Substrings
.LI "68hc05"
hc
HC
.LI "146805"
4
.LI "6305"
3
.LI "6805"
05
l05
L05
.LE
.H 2 "Instructions"
.H 3 "Instruction List"
.TS H
;
l l l.
Opcode	Syntax	Selection Criteria
.sp
.TH
.sp
ADC	 '#' expr
ADC	 expr	DIRECT
ADC	 expr	EXTENDED
ADC	 indexed	INDEX0
ADC	 indexed	INDEX1
ADC	 indexed	INDEX2
.sp
ADD	 '#' expr
ADD	 expr	DIRECT
ADD	 expr	EXTENDED
ADD	 indexed	INDEX0
ADD	 indexed	INDEX1
ADD	 indexed	INDEX2
.sp
AND	 '#' expr
AND	 expr	DIRECT
AND	 expr	EXTENDED
AND	 indexed	INDEX0
AND	 indexed	INDEX1
AND	 indexed	INDEX2
.sp
ASL	 expr	DIRECT
ASL	 indexed	INDEX0
ASL	 indexed	INDEX1
.sp
ASLA
.sp
ASLX
.sp
ASR	 expr	DIRECT
ASR	 indexed	INDEX0
ASR	 indexed	INDEX1
.sp
ASRA
.sp
ASRX
.sp
BCC	 expr
.sp
BCLR	 expr ',' expr
.sp
BCS	 expr
.sp
BEQ	 expr
.sp
BHCC	 expr
.sp
BHCS	 expr
.sp
BHI	 expr
.sp
BHS	 expr
.sp
BIH	 expr
.sp
BIL	 expr
.sp
BIT	 '#' expr
BIT	 expr	DIRECT
BIT	 expr	EXTENDED
BIT	 indexed	INDEX0
BIT	 indexed	INDEX1
BIT	 indexed	INDEX2
.sp
BLO	 expr
.sp
BLS	 expr
.sp
BMC	 expr
.sp
BMI	 expr
.sp
BMS	 expr
.sp
BNE	 expr
.sp
BPL	 expr
.sp
BRA	 expr
.sp
BRCLR	 expr ',' expr ',' expr
.sp
BRN	 expr
.sp
BRSET	 expr ',' expr ',' expr
.sp
BSET	 expr ',' expr
.sp
BSR	 expr
.sp
CLC
.sp
CLI
.sp
CLR	 expr	DIRECT
CLR	 indexed	INDEX0
CLR	 indexed	INDEX1
.sp
CLRA
.sp
CLRX
.sp
CMP	 '#' expr
CMP	 expr	DIRECT
CMP	 expr	EXTENDED
CMP	 indexed	INDEX0
CMP	 indexed	INDEX1
CMP	 indexed	INDEX2
.sp
COM	 expr	DIRECT
COM	 indexed	INDEX0
COM	 indexed	INDEX1
.sp
COMA
.sp
COMX
.sp
CPX	 '#' expr
CPX	 expr	DIRECT
CPX	 expr	EXTENDED
CPX	 indexed	INDEX0
CPX	 indexed	INDEX1
CPX	 indexed	INDEX2
.sp
DAA		INSTDAA
.sp
DEC	 expr	DIRECT
DEC	 indexed	INDEX0
DEC	 indexed	INDEX1
.sp
DECA
.sp
DECX
.sp
EOR	 '#' expr
EOR	 expr	DIRECT
EOR	 expr	EXTENDED
EOR	 indexed	INDEX0
EOR	 indexed	INDEX1
EOR	 indexed	INDEX2
.sp
INC	 expr	DIRECT
INC	 indexed	INDEX0
INC	 indexed	INDEX1
.sp
INCA
.sp
INCX
.sp
JMP	 expr	DIRECT
JMP	 expr	EXTENDED
JMP	 indexed	INDEX0
JMP	 indexed	INDEX1
JMP	 indexed	INDEX2
.sp
JSR	 expr	DIRECT
JSR	 expr	EXTENDED
JSR	 indexed	INDEX0
JSR	 indexed	INDEX1
JSR	 indexed	INDEX2
.sp
LDA	 '#' expr
LDA	 expr	DIRECT
LDA	 expr	EXTENDED
LDA	 indexed	INDEX0
LDA	 indexed	INDEX1
LDA	 indexed	INDEX2
.sp
LDX	 '#' expr
LDX	 expr	DIRECT
LDX	 expr	EXTENDED
LDX	 indexed	INDEX0
LDX	 indexed	INDEX1
LDX	 indexed	INDEX2
.sp
LSL	 expr	DIRECT
LSL	 indexed	INDEX0
LSL	 indexed	INDEX1
.sp
LSLA
.sp
LSLX
.sp
LSR	 expr	DIRECT
LSR	 indexed	INDEX0
LSR	 indexed	INDEX1
.sp
LSRA
.sp
LSRX
.sp
MUL		INSTMUL
.sp
NEG	 expr	DIRECT
NEG	 indexed	INDEX0
NEG	 indexed	INDEX1
.sp
NEGA
.sp
NEGX
.sp
NOP
.sp
ORA	 '#' expr
ORA	 expr	DIRECT
ORA	 expr	EXTENDED
ORA	 indexed	INDEX0
ORA	 indexed	INDEX1
ORA	 indexed	INDEX2
.sp
ROL	 expr	DIRECT
ROL	 indexed	INDEX0
ROL	 indexed	INDEX1
.sp
ROLA
.sp
ROLX
.sp
ROR	 expr	DIRECT
ROR	 indexed	INDEX0
ROR	 indexed	INDEX1
.sp
RORA
.sp
RORX
.sp
RSP
.sp
RTI
.sp
RTS
.sp
SBC	 '#' expr
SBC	 expr	DIRECT
SBC	 expr	EXTENDED
SBC	 indexed	INDEX0
SBC	 indexed	INDEX1
SBC	 indexed	INDEX2
.sp
SEC
.sp
SEI
.sp
STA	 expr	DIRECT
STA	 expr	EXTENDED
STA	 indexed	INDEX0
STA	 indexed	INDEX1
STA	 indexed	INDEX2
.sp
STOP		INSTSTWA
.sp
STX	 expr	DIRECT
STX	 expr	EXTENDED
STX	 indexed	INDEX0
STX	 indexed	INDEX1
STX	 indexed	INDEX2
.sp
SUB	 '#' expr
SUB	 expr	DIRECT
SUB	 expr	EXTENDED
SUB	 indexed	INDEX0
SUB	 indexed	INDEX1
SUB	 indexed	INDEX2
.sp
SWI
.sp
TAX
.sp
TST	 expr	DIRECT
TST	 indexed	INDEX0
TST	 indexed	INDEX1
.sp
TSTA
.sp
TSTX
.sp
TXA
.sp
WAIT		INSTSTWA
.TE
.H 3 "Selection Criteria Keywords"
.VL 25 5
.LI DIRECT
The direct addressing mode can be used if the expression has a value
between 0 and 255.
The expression will be treated as a two byte long value if it is not
defined when the statement is processed in the first pass.
.LI EXTENDED
The expression can be a 2 byte long value.
.LI INDEX0
The Indexed addressing mode with no offset can be used.
.LI INDEX1
The Indexed addressing mode with a one byte offset can be used.
.LI INDEX2
The Indexed addressing mode with two byte offset can be used.
.LI INSTSTWA
The instruction is only available in the 146805, 6305, and 68hc05 instruction
sets.
.LI INSTMUL
The instruction is only available in the 68hc05 instruction set.
.LI INSTDAA
The instruction is only available in the 6305 instruction set.
.LE
.H 3 "Apostrophes"
The apostrophes in the syntax field are a notation used for the
parser generator and are not put in the assembler source statement.
.H 2 "Notes"
.H 3 "Bit Numbers"
The bit number expression in the BSET, BCLR, BRCLR, BRSET operations has
to have value defined when the instruction is read in the first pass.
The value must be between 0 and 7.
.H 3 "Indexed Addressing"
The indexed addressing mode is represented in two ways.
.P
First, with no offset, the form ",X" is used.
.P
Second, the form "expression, X" is used for both the one and two byte
offsets modes.
The expression will be treated as a two byte long value if it is not
defined when the statement is processed in the first pass.
.H 3 "Reserved Symbols"
.H 4 "Machine Dependent Reserved Symbols"
X
x
.H 4 "Standard Reserved Symbols"
AND
DEFINED
EQ
GE
GT
HIGH
LE
LOW
LT
MOD
NE
NOT
OR
SHL
SHR
XOR
and
defined
eq
ge
gt
high
le
low
lt
mod
ne
not
or
shl
shr
xor
.TC 1 1 7
