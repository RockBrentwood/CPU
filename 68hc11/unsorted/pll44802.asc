
**************************************************************************
*
*                   IIC-Bus Software for 68HC11 
*
* author: Martin Raubuch
* last change: 20.02.88
*
* CONSTANTS
*
REGSTART  equ   $1000                  start-address of special func. registers
IICSTART  equ   $C000                  IIC program start-address
IICPAR    equ   $40                    IIC parameter start-address
FREQU     equ   $50                    PLL frequency parameter
IICPORT   equ   $03                    IIC port address-offset
MIICDATA  equ   $01                    mask for data-line
MIICCLK   equ   $02                    mask for clock-line
DEVADR    equ   $C2                    PLL MC44802 device-address
PIOC      equ   $02                    parallel port control register
DDRC      equ   $07                    port c data direction register
*
* PROGRAM
*
          org   IICSTART
*
CONTINFO  fcb   $97                    PLL control-information
BANDINFO  fcb   $00                    PLL band-information
*
*******************************  S_DEVADR  ************************************
*
S_DEVADR  ldx   #REGSTART              load register-bank start-address
          bclr  IICPORT,x,#MIICDATA    set data-line to '0' (start-condition)
          ldab  #8                     init loop-counter
DEVADRLP  bclr  IICPORT,x,#MIICCLK     set clock-line to '0'	  
          rola                         get data-bit
          bcs   DEVADRST               and put it to data-line 
          bclr  IICPORT,x,#MIICDATA 
          bra   DEVADRCK 
DEVADRST  bset  IICPORT,x,#MIICDATA
DEVADRCK  bset  IICPORT,x,#MIICCLK     set clock-line to '1' 
	  decb                         decrement loop-counter
          bne   DEVADRLP
	  bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
          bset  IICPORT,x,#MIICDATA    set data-line to '1' (high impedance)
	  bset  IICPORT,x,#MIICCLK     set clock-line to '1'
	  ldab  #MIICDATA
	  bitb  IICPORT,x              test acknowledge
          rts
*
*********************************  S_BYTE  ************************************
*
S_BYTE    ldab  #8                     init loop-counter
SBYTELP   bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
          rola                         get data-bit
          bcs   SBYTEST                and put it to data-line 
          bclr  IICPORT,x,#MIICDATA 
          bra   SBYTECK 
SBYTEST   bset  IICPORT,x,#MIICDATA
SBYTECK   bset  IICPORT,x,#MIICCLK     set clock-line to '1' 
	  decb                         decrement loop-counter
          bne   SBYTELP
          bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
	  bset  IICPORT,x,#MIICDATA    set data-line to '1' (high inpedance)
	  bset  IICPORT,x,#MIICCLK     set clock-line to '1'
	  ldab  #MIICDATA
	  bitb  IICPORT,x              test acknowledge
          rts
*
*********************************  R_BYTEA  ***********************************
*
R_BYTEA   ldab  #8                     init loop-counter
RBALP     bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
          bset  IICPORT,x,#MIICDATA    set data-line to '1' (high impedance)
          bset  IICPORT,x,#MIICCLK     set clock-line to '1'
          lsla 
	  brclr IICPORT,x,#MIICDATA,RBACK    test data-line
	  inca
RBACK	  decb                         decrement loop-counter
          bne   RBALP
	  bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
	  bclr  IICPORT,x,#MIICDATA    set data-line to '0' (acknowledge)
	  bset  IICPORT,x,#MIICCLK     set clock-line to '1'
          rts
*
*********************************  R_BYTEN  ***********************************
*
R_BYTEN   ldab  #9                     init loop-counter
RBNLP     bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
          bset  IICPORT,x,#MIICDATA    set data-line to '1' (high impedance)
          bset  IICPORT,x,#MIICCLK     set clock-line to '1'
          lsla 
	  brclr IICPORT,x,#MIICDATA,RBNCK    test data-line
	  inca
RBNCK	  decb                         decrement loop-counter
          bne   RBNLP
          rts
*
******************************  S_BLOCK  **************************************
*
S_BLOCK   ldaa  IICPAR                 load device-address
          anda  #$FE                   set RW-bit to 0 (write)
	  jsr   S_DEVADR               send device-address
	  beq   SBLEND                 if no acknowledge -> end
	  ldaa  IICPAR+1               load slave start-address
	  jsr   S_BYTE                 send slave start-address
	  beq   SBLEND                 if no acknowledge -> end
	  ldy   IICPAR+2               load block start-address
SBLLOOP   ldaa  0,Y                    load data-byte
          jsr   S_BYTE                 send data-byte
	  beq   SBLEND
	  iny                          increment data-block address
	  dec   IICPAR+4	       decrement block-size
	  bpl   SBLLOOP
SBLEND    bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
	  bclr  IICPORT,x,#MIICDATA    set data-line to '0'
	  bset  IICPORT,x,#MIICCLK     set clock-line to '1' (stop-condition)
	  bset  IICPORT,x,#MIICDATA    set data-line to '1' (stop-condition)
          rts
*
******************************  R_BLOCK  **************************************
*
R_BLOCK   ldaa  IICPAR                 load device-address
          anda  #$FE                   set RW-bit to 0 (write)
	  jsr   S_DEVADR               send device-address
	  beq   RBLEND                 if no acknowledge -> end
	  ldaa  IICPAR+1               load slave start-address
	  jsr   S_BYTE                 send slave start-address
	  beq   RBLEND                 if no acknowledge -> end
          ldaa  IICPAR                 load device-address
	  oraa  #1                     set RW-bit to '1' (read)
	  jsr   S_DEVADR               send device-address
	  beq   RBLEND                 if no acknowledge -> end
	  ldy   IICPAR+2               load block start-address
RBLLOOP   jsr   R_BYTEA                receive data-byte with acknowledge
          staa  0,y                    write data to block
	  iny                          increment block-address
	  dec   IICPAR+4	       decrement block-size
	  bne   RBLLOOP
	  jsr   R_BYTEN                receive data-byte without acknowledge
	  staa  0,y                    write data to block
RBLEND    bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
	  bclr  IICPORT,x,#MIICDATA    set data-line to '0'
	  bset  IICPORT,x,#MIICCLK     set clock-line to '1' (stop-condition)
	  bset  IICPORT,x,#MIICDATA    set data-line to '1' (stop-condition)
          rts
*
******************************  P_BLOCK  **************************************
*
P_BLOCK   ldy   IICPAR+4               load block start-address
PBLLOOP   ldaa  IICPAR                 load device-address
          anda  #$FE                   set RW-bit to 0 (write)
	  jsr   S_DEVADR               send device-address
	  beq   PBLEND                 if no acknowledge -> end
	  ldaa  IICPAR+1               load slave byte-address
	  jsr   S_BYTE                 send slave byte-address
	  beq   PBLEND                 if no acknowledge -> end
          ldaa  0,Y                    load data-byte
          jsr   S_BYTE                 send data-byte
          bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
	  bclr  IICPORT,x,#MIICDATA    set data-line to '0'
	  bset  IICPORT,x,#MIICCLK     set clock-line to '1' (stop-condition)
          bset  IICPORT,x,#MIICDATA    set data-line to '1' (stop-condition)
	  ldx   #3500                  10 ms delay for EEPROM programming
PBLDEL	  dex
	  bne   PBLDEL
	  ldx   #REGSTART              reload register-bank start-address
          ldaa  IICPAR                 load device-address
          anda  #$FE                   set RW-bit to 0 (write)
	  jsr   S_DEVADR               send device-address
          beq   PBLEND                 if no acknowledge -> end
	  iny                          increment data-block address
	  inc   IICPAR+1               increment slave byte-address
	  dec   IICPAR+4	       decrement block-size
	  bpl   PBLLOOP
PBLEND    bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
	  bclr  IICPORT,x,#MIICDATA    set data-line to '0'
	  bset  IICPORT,x,#MIICCLK     set clock-line to '1' (stop-condition)
	  bset  IICPORT,x,#MIICDATA    set data-line to '1' (stop-condition)
          rts
*
********************************  PLLPROG  ************************************
*
PLLPROG   ldx   #REGSTART              load register-bank start-address
          ldaa  #$20                   set port c to open drain
	  staa  PIOC,x
	  bset  DDRC,x,#MIICDATA       set data-line to output
	  bset  DDRC,x,#MIICCLK        set clock-line to output
          ldy   #2000                  initial value 20 MHz
	  sty   FREQU
PLLLOP    ldaa  #DEVADR
	  jsr   S_DEVADR               send device-address
	  ldaa  FREQU
	  jsr   S_BYTE                 send frequency upper
	  ldaa  FREQU+1      
	  jsr   S_BYTE                 send frequency lower
	  ldaa  CONTINFO
	  jsr   S_BYTE                 send control-information
	  ldaa  BANDINFO 
	  jsr   S_BYTE                 send band-information
          bclr  IICPORT,x,#MIICCLK     set clock-line to '0'
	  bclr  IICPORT,x,#MIICDATA    set data-line to '0'
	  bset  IICPORT,x,#MIICCLK     set clock-line to '1' (stop-condition)
	  bset  IICPORT,x,#MIICDATA    set data-line to '1' (stop-condition)
          ldy   #1000
PLLDEL    dey
          bne   PLLDEL
          ldy   FREQU
	  iny
	  sty   FREQU
	  cpy   #12000
          bne   PLLLOP	  
          bra   PLLPROG   
          rts
*
          end 

