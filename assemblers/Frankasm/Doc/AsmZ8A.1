.HM A 1 1 1 1 1 1
.H 1 "Appendix for AsmZ8 Frankenstein Assembler"
.H 2 "Pseudo Operations"
.H 3 "Standard Pseudo Operation Mnemonics"
.VL 40 5 1
.LI "End"
END
.LI "File Inclusion"
INCL
INCLUDE
.LI "If"
IF
.LI "Else"
ELSE
.LI "End If"
ENDI
.LI "Equate"
EQU
.LI "Set"
SET
.LI "Org"
ORG
.LI "Reserve Memory"
RESERVE
RMB
.LI "Define Byte Data"
BYTE
DB
FCB
.LI "Define Word Data"
DW
FDB
WORD
.LI "Define String Data"
FCC
STRING
.LI "Define Character Set Translation"
CHARSET
.LI "Define Character Value"
CHARDEF
CHD
.LI "Use Character Translation"
CHARUSE
.LE
.H 3 "Machine Dependent Pseudo Operations"
.H 4 "Register Symbol Definitions"
.DS I N
Label REG RegisterSymbol
Label RREG RegisterSymbol
Label REG expression
Label RREG expression
Label REG
Label RREG
.DE
.P
Symbols in the register address space are defined with the REG, and RREG
pseudooperations.
The symbol in the label field is added to the symbol table as a register
symbol.
The symbols defined with the REG are single byte registers.
The symbols defined with RREG are double registers, and must be on even
boundries.
.P
The operand can be in three forms.
.P
When the operand is a register symbol, the label symbol is defined with
the same register address as the symbol, with the size determined by which
pseudoop is used.
Aliases to working registers must use this form.
.P
When the operand is an expression, the label symbol is defined at the
value of the expression, with the size determined by which pseudoop is used.
The value must be in the range 0 to 127 (or 223 for the UPC register set),
or 240 to 255, and must be defined at the first pass.
.P
With no operand, the label symbol is defined at the register address
following the previous REG or RREG instruction.
If a previous Register Definition used a working register as its operand,
the current definition will be in the working set, otherwise it will be
in the register file.
.P
Register Symbols must be surrounded by parenthesis when used in expressions.
.H 4 "Register Set Selection"
.DS I N
CPU string
.DE
The register set can be specified in the source file with the CPU
pseudooperation.
The string, delimited by quotes or apostrophes, is scanned for a
substring which selects which register set is used.
When the program is invoked, this operation is performed on the name of
the program, then the -p optional arguement, if any, and then any CPU
statements.
The last one selects the which subset of the registers the assembler will
accept.
.VL 30 5 1
.LI "Register Architecture"
Substrings
.SP
.LI "z8"
86
z8
Z8
.SP
.LI "Universal"
UPC
upc
9
.LI "Peripheral"
.LI "Controller"
.LE
.H 2 "Instructions"
.H 3 "Instruction List"
.TS H
;
l l l.
Opcode	Syntax	Selection Criteria
.sp
.TH
.sp
ADC	 '@' REGISTER ',' '#' expr
ADC	 REGISTER ',' '#' expr
ADC	 REGISTER ',' '@' REGISTER
ADC	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
ADC	 REGISTER ',' REGISTER
ADC	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
ADD	 '@' REGISTER ',' '#' expr
ADD	 REGISTER ',' '#' expr
ADD	 REGISTER ',' '@' REGISTER
ADD	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
ADD	 REGISTER ',' REGISTER
ADD	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
AND	 '@' REGISTER ',' '#' expr
AND	 REGISTER ',' '#' expr
AND	 REGISTER ',' '@' REGISTER
AND	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
AND	 REGISTER ',' REGISTER
AND	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
CALL	 '@' REGISTER	DSTDBL
CALL	 expr
.sp
CCF
.sp
CLR	 '@' REGISTER
CLR	 REGISTER
.sp
COM	 '@' REGISTER
COM	 REGISTER
.sp
CP	 '@' REGISTER ',' '#' expr
CP	 REGISTER ',' '#' expr
CP	 REGISTER ',' '@' REGISTER
CP	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
CP	 REGISTER ',' REGISTER
CP	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
DA	 '@' REGISTER
DA	 REGISTER
.sp
DEC	 '@' REGISTER
DEC	 REGISTER
.sp
DECW	 '@' REGISTER
DECW	 REGISTER	DSTDBL
.sp
DI
.sp
DJNZ	 REGISTER ',' expr	DSTWORK
.sp
EI
.sp
INC	 '@' REGISTER
INC	 REGISTER
INC	 REGISTER	DSTWORK
.sp
INCW	 '@' REGISTER
INCW	 REGISTER	DSTDBL
.sp
IRET
.sp
JP	 '@' REGISTER	DSTDBL
JP	 CONDITION ',' expr
JP	 expr
.sp
JR	 CONDITION ',' expr
JR	 expr
.sp
LD	 '@' REGISTER ',' '#' expr
LD	 '@' REGISTER ',' REGISTER
LD	 '@' REGISTER ',' REGISTER	DSTWORK+SRCWORK
LD	 REGISTER ',' '#' expr
LD	 REGISTER ',' '#' expr	DSTWORK
LD	 REGISTER ',' '@' REGISTER
LD	 REGISTER ',' '@' REGISTER	DSTWORK+SRCWORK
LD	 REGISTER ',' REGISTER
LD	 REGISTER ',' REGISTER	DSTWORK
LD	 REGISTER ',' REGISTER	SRCWORK
LD	 REGISTER ',' expr '(' REGISTER ')'	DSTWORK+SRCWORK
LD	 expr '(' REGISTER ')' ',' REGISTER 	DSTWORK+SRCWORK
.sp
LDC	 '@' REGISTER ',' REGISTER	DSTWORK+SRCWORK
LDC	 REGISTER ',' '@' REGISTER	DSTWORK+SRCWORK
.sp
LDCI	 '@' REGISTER ',' '@' REGISTER	DSTDBL+DSTWORK+SRCWORK
LDCI	 '@' REGISTER ',' '@' REGISTER	SRCDBL+DSTWORK+SRCWORK
.sp
LDE	 '@' REGISTER ',' REGISTER	DSTWORK+SRCWORK
LDE	 REGISTER ',' '@' REGISTER	DSTWORK+SRCWORK
.sp
LDEI	 '@' REGISTER ',' '@' REGISTER	DSTDBL+DSTWORK+SRCWORK
LDEI	 '@' REGISTER ',' '@' REGISTER	SRCDBL+DSTWORK+SRCWORK
.sp
NOP
.sp
OR	 '@' REGISTER ',' '#' expr
OR	 REGISTER ',' '#' expr
OR	 REGISTER ',' '@' REGISTER
OR	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
OR	 REGISTER ',' REGISTER
OR	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
POP	 '@' REGISTER
POP	 REGISTER
.sp
PUSH	 '@' REGISTER
PUSH	 REGISTER
.sp
RCF
.sp
RET
.sp
RL	 '@' REGISTER
RL	 REGISTER
.sp
RLC	 '@' REGISTER
RLC	 REGISTER
.sp
RR	 '@' REGISTER
RR	 REGISTER
.sp
RRC	 '@' REGISTER
RRC	 REGISTER
.sp
SBC	 '@' REGISTER ',' '#' expr
SBC	 REGISTER ',' '#' expr
SBC	 REGISTER ',' '@' REGISTER
SBC	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
SBC	 REGISTER ',' REGISTER
SBC	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
SCF
.sp
SRA	 '@' REGISTER
SRA	 REGISTER
.sp
SRP	 '#' expr
.sp
SUB	 '@' REGISTER ',' '#' expr
SUB	 REGISTER ',' '#' expr
SUB	 REGISTER ',' '@' REGISTER
SUB	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
SUB	 REGISTER ',' REGISTER
SUB	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
SWAP	 '@' REGISTER
SWAP	 REGISTER
.sp
TCM	 '@' REGISTER ',' '#' expr
TCM	 REGISTER ',' '#' expr
TCM	 REGISTER ',' '@' REGISTER
TCM	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
TCM	 REGISTER ',' REGISTER
TCM	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
TM	 '@' REGISTER ',' '#' expr
TM	 REGISTER ',' '#' expr
TM	 REGISTER ',' '@' REGISTER
TM	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
TM	 REGISTER ',' REGISTER
TM	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.sp
XOR	 '@' REGISTER ',' '#' expr
XOR	 REGISTER ',' '#' expr
XOR	 REGISTER ',' '@' REGISTER
XOR	 REGISTER ',' '@' REGISTER	SRCWORK+DSTWORK
XOR	 REGISTER ',' REGISTER
XOR	 REGISTER ',' REGISTER	SRCWORK+DSTWORK
.TE
.H 3 "Selection Criteria Keywords"
.VL 25 5
.LI DSTWORK
The instruction will use the short form if
the register is in the working set.
.LI DSTDBL
The instruction requires that the destination register be a double register.
.LI SRCWORK
The instruction will use the short form if
the register is in the working set.
.LI SRCDBL
The instruction requires that the source register be a double register.
.LE
.H 3 "Apostrophes"
The apostrophes in the syntax field are a notation used for the
parser generator and are not put in the assembler source statement.
.H 2 "Notes"
.H 3 "Registers"
Registers are treated as symbols with a different syntactic type than
memory addresses.
This seperates symbols which would have the same numeric value into the
different address spaces, register and memory.
Using a symbol that is already defined as a Register as a statement label
for an instruction or a SET/EQU will result in a "Syntax Error".
.P
Registers are represented by the reserved symbols R0 thru R15 and RR0 thru
RR14 for the working set registers.
Other registers are defined with the REG and RREG pseudooperations.
.P
Register Symbols must be surrounded by parenthesis when used in expressions.
Converted register values are meaningless as ROM or Data memory addresses.
Working set registers have a value between 0e0h and 0efh.
.DS I N
Example
.SP
ld r3, #(buffstart)
.DE
.H 3 "Data Memory"
ROM and Data memory addresses are not differentiated.
.H 3 "Conditions"
Conditions are represented by the reserved symbols F, C, NC, Z, NZ, PL, MI,
OV, NOV, EQ, NE, GE, LT, GT, LE, UGE, ULT, UGT, ULE
.P
Note that the EQ, NE, GT, LE, GE, LT operators are not available in this
assembler, the =, <>, >, <=, >=, < special character representations must
be used.
.H 3 "Reserved Symbols"
.H 4 "Machine Dependent Reserved Symbols"
AND
C
DEFINED
EQ
F
GE
GT
HIGH
LE
LOW
LT
MI
MOD
NC
NE
NOT
NOV
NZ
OR
OV
PL
R0
R1
R10
R11
R12
R13
R14
R15
R2
R3
R4
R5
R6
R7
R8
R9
RR0
RR10
RR12
RR14
RR2
RR4
RR6
RR8
SHL
SHR
UGE
UGT
ULE
ULT
XOR
Z
and
defined
high
low
mod
not
or
shl
shr
xor
.TC 1 1 7
