The 8051 Data Collection Unit
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
0. Introduction
───────────────
This reference details the implementation and operation of the data collection software included in this package,
and its required hardware configuration.

1. Microprocessor-Based Data Collection
───────────────────────────────────────
The original purpose of this software was to carry out a set of fluid flow tests on fluid meters in parellel.
Two of these units could be controlled from a PC over a RS-485 serial link.
Each unit could test up to 6 meters at a time.

Each meter has inside it a magnet which rotated in response to the fluid flowing through it.
At a given flow rate, this magnet will rotate a constant amount for each unit of fluid volume passing through the meter.
This constant will be approximately, but not exactly;
the same for different flow rates and is an inherent characteristics of the meter's construction.

The magnet internal to the meter is divided into a fixed number of sectors of alternating magnetic field.
As the magnet rotates, it can be used to generate an square electrical waveform
which is ideally suited for measurement by a microprocessor.

The microprocessor-based data collection unit will mark off a set number of square waves
(corresponding to one full rotation of the magnet), measure its width, and collect the information for successive measurements.
It will use this information to determine the number of complete rotations of the meter's magnet
and to estimate the number of fractional rotations, thus obtaining a highly accurate measurement of the meter's behavior.

For future reference, the term «Nutation» is also used to mean one full rotation of the meter's internal magnet.

The system is set up in such a way that each unit will receive a signal
at the start of a test and a signal at the end of the test.
The function of these signals is to delimit a test and mark off a fixed volume of fluid.

The remaining part of this reference will refer to this specific configuration,
but it should be noted that this software is completely generic.
It can be used to measure and perform statistical processing on any set of up to 6 square wave inputs
using a 7th falling edge input to mark the start and end of a test.

1a. Hardware Interface
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
Data collection is done using an Intel 8051FA microprocessor running dedicated stand-alone software.
Each microprocessor is connected to 6 pulse inputs, to a sensor signal input, and to a RS-485 serial communications connection.
The pulse inputs enable the microprocessor to perform measurements on each of the 6 sources it is monitoring, as explained above.
The sensor input is responsible for signalling to microprocessor when to start and stop the measurement and counting.
Finally, the communications link enables the micrprocessor to communicate with the master PC
so that its data can be transferred to the central controller.

The inputs and outputs are set up as listed below:
	Function		Location
	――――――――		――――――――
	Pulse input 0		T2EX:	Timer 2 External
	Pulse input 1		CEX0:	Counter External 0
	Pulse input 2		CEX1:	Counter External 1
	Pulse input 3		CEX2:	Counter External 2
	Pulse input 4		CEX3:	Counter External 3
	Pulse input 5		CEX4:	Counter External 4
	Sensor input		INT0:	External Interrupt 0
	Serial Communications	RxD:	Receive input
				TxD:	Transmit output
				T0:	RS-485 transmit enable

1b. Internal Software Architecture
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
This is a multi-tasking software architecture.
Several independent tasks will be running simultaneously on the one 8051FA chip.
They communicate with each other and with the outside world using the 8051 multitasking library.
Because of the large number of processes and the limit on stack space,
several compromises were made when integrating this library with the rest of the data collection software.

The microprocessor is responsible for monitoring 6 counters,
and performing statistical operations for each counter concurrently as it is collecting the data.
A processing loop is set up for each counter and is synchronized by the counter input.

A process is set up to monitor a test, and is synchronized to the sensor input.
When the first signal is receives, this process will Spawn the 6 counter processes (and also 2 timer processes).
When it receives the second signal, it will disable the counter inputs (and clocks) and thus stop the processes it spawned.

Finally, the microprocessor will monitor the serial communications link, waiting for commands from the master PC.
These commands serve three purposes:
∙	the enable/disable the master test process,
∙	the signal the microprocessor to transfer its data over the serial communications link, and
∙	for diagnostic purposes to test the microprocessor's status and proper functioning.

1c. Data Collection Method
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
The data collection method used measures the times for full meter nutations during a test between the two sensor signals

Suppose these events take place, as illustrated in the time-line below:

	┌───────────────────────────────────────────────────────────────────────┐
	│ N = Meter Nutation							│
	│ S = Sensor Signal							│
	│									│
	│                  S                                         S		│
	│        N   N   N ↓   N      N      N      N      N     N   ↓ N    N	│
	│        │   │   │ ┌───┼──────┼──────┼──────┼──────┼─────┼───┐ │    │	│
	│        │   │   │ │ F │  w₀  │  w₁  │  w₂  │  w₃  │  w₄ │ L │ │    │	│
	│                  └─────────────────────────────────────────┘		│
	│                  ↑   ↑                                 ↑   ↑		│
	│                  S   B      ⇐ N full nutations ⇒       C   T		│
	│									│
	│			Events:	S:	First Sensor Time,		│
	│				B:	First Meter Nutation Time,	│
	│				C:	Last Meter Nutation Time,	│
	│				T:	Last Sensor Time		│
	│									│
	│ First Partial Pulse Width:	F = B - S				│
	│ Last Partial Pulse Width:	L = T - C				│
	│ Average Pulse Width:		<w> = (C - B)/N				│
	│				[N = 5 in this example]			│
	│									│
	│ Estimated First Partial:	F/<w>					│
	│ Estimated Last Partial:	L/<w>					│
	│ Estimated Total Nutations:	N + F/<w> + L/<w>			│
	│				which actually comes out to:		│
	│				(T - S)/<w> =  N (T - S) / (C - B)	│
	└───────────────────────────────────────────────────────────────────────┘

Then the tester will only be actively counting «between» events S and T.
The data collection method will calculate the nutation widths w₀, w₁, w₂, w₃, w₄
(thus counting 5 full nutations in this example); and F and L ― the first and last partial nutations.
It will then «estimate» what fraction of full nutations F and L represent
by dividing F and L respectively by the average value of the w's.

To ensure that a steady flow condition is valid, we also measure the «variance» of the pulse widths, which is defined here as:
	Variance = Standard-Deviation of w's / Average of w's × 100%

Typical values in the actual test system this software was used for could vary between 2% and 3% for high flow rates,
down to 0.5% for low flow rates.
A high variance (say, above 5%) invalidates the extrapolation method we use, which is premised on a constant flow rate.
High variances can happen for two reasons:
∙	Fluid flow is not in a steady state at the test boundaries.
	This can occur if the underlying system is still in a transient state as a test starts.
∙	The unit undergoing test itself is not operating reliably.

1d. Counter Processing
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
To be able to deal with 6 counters with one microprocessor requires some special measures be taken.
On average, for our actual test conditions (20 nutations per second received from each of the 6 inputs)
the 8051FA will spend 30% of its time during the high flow test doing actual statistical calcultions.
However, the demand on the processor can vary between 5% and 200%
depending on when the 6 inputs delimit full nutations relative to one another.
The maximum load will occur when the majority of the 6 inputs have full nutations close to one another in time.

What we do is the following.
When an input has signalled one full nutation, the time of this event is saved in a protected location.
A completely independent process, called the Scheduler, started at the beginning of the test,
will periodically remove one «and only one» of these saved items,
passing it on to the corresponding statistical processing routine.
This simple, but effective, strategy will keep the processor active at about a constant 30% rate
(for the test conditions indicated above).

1e. Communications
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
The details of serial commuications will be described in more detail in the section dealing with the MicroNet.
The underlying protocol used for this system is: 9 data bits, 1 stop bit, no parity, and 9600 baud (9600,N,9,1).
The 9th data bit is used for networking purposes to distinguish commands from data.
The centrally located PC will always send commands with the 9th bit high,
and the microprocesors will always send data, with the 9th bit low.
This protocol will help protect the network from inadvertent access by two or more processors at once.

1f. Command Reference
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
As a slave unit to the central PC, each microprocessor will respond to a set of commands.
These commands are described in brief below and will be detailed in the section on the MicroNet.

∙	STATUS:	A diagnostic command that queries the current state of the data collection unit.
		It will respond to the PC that it is in one of the following modes:
	―	ACTIVE:		In active command mode, ready to start a new test.
	―	WAITING:	In test mode, waiting on the first sensor.
	―	TESTING:	In test mode, collecting data, waiting on the second sensor.
∙	TEST:	A command telling the microprocessor to pass into the waiting mode.
		It is ignored unless the microprocessor is active.
∙	ABORT:	A command that forces the processor back into the active mode and cancels the current test.
∙	DUMP:	A diagnostic command used by the PC to obtain the detailed set of nutation widths
		collected by the processor in the most recent test.
∙	STATS:	A command used by the PC to obtain the statistical results of the most recent test.

During the normal course of system operation, only the TEST and STATS commands will ever be used.
The ABORT is used on exceptional occasions such as when a communication failure takes place, or when a test is aborted by the PC.
The other two commands are only used by diagnostic programs.

2. MicroNet
―――――――――――
MicroNet is a relatively simple multi-processor network custom-designed specifically for use with this test system.
It has a multi-drop topology in which one master controller (a PC) communicates with several slave processors (8051FA's).
The network has been designed in several layers, as is standard practice: a Physical Layer, a Protocol Layer, and a Command Layer.

This section has all the details needed for anyone who wants to write client software at a PC (or elsewhere)
to communicate with the microprocessors.

2a. The Physical Layer
…………………………………………………………
This layer is concerned primarily with the actual details of the connections between the processors.
An RS-485 serial communications link is being used, which is similar to the RS-422 link,
except it allows several processors to be on the line, instead of just two.

The actual circuit is a loop terminated by a resistor.
Each processor on the loop receives input from the network by sampling inputs from opposite ends of the loop across the resistor.

At any given time, up to one processor can take control of the loop, passing into a transmission state.
All other processors must be in a reception state at that time for proper signalling to take place.
For this purpose, each processor has a transmit/receive control output which allows it to connect or disconnect its transmitter.

The microprocessor units use the T0 pin, mentioned briefly in the previous section for this purpose.
The master PC must likewise use its own control output for the same function.
Normally, an RS-485 serial communications card will need to be installed in the PC.

2b. The Protocol Layer
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
The primary purposes of the protocol layer are to:
∙	Protect the network against multiple access by two or more transmitters.
∙	Ensure proper routing of transmissions.
∙	Ensure reliable transmission.
This is actually done at two levels: one closely tied to the physical layer and the other implemented completely in software.

2bi. Low-level, physical, protocol
----------------------------------
For transmission, we use the protocol 9600, N, 9, 1: 9600 baud, no parity, 9 data bits, and one stop bit.
Error-free communication has been proven at baud rates up to 57600 with the units all within 2 meters of each other.

The first 8 data bits are used to transfer information or commands.
The 9th bit is used for protocol purposes in the following way:

∙	All transmission to a microprocessors occurs with the 9th bit set to 1.
∙	All transmission from a microprocessor occurs with the 9th bit set to 0.
∙	All microprocessors ignore transmissions where the 9th bit is 0.

These three conditions make it logically impossible for microprocessors to
communicate with one another, when the underlying Physical Layer is functioning
reliably.  They can only communicate with the master PC.  This is one of the
key conditions that assures the network's protection against simultaneous
access.  Complete assurance is provided by the software portion of the protocol.

2bii. High-level, software, protocol: Addressing
------------------------------------------------
Since there are only two micrprocessor units on the network, routing is greatly simplified.
Call these units A, and B.
All commands to the microprocessors will have the following format:
		1	B A	C C C	M M M

The high-order bit is always set to 1, as explained above.
The next two bits (A, and B) are ADDRESS bits.
They have the following definitions:
	A: Indicates unit A as a recipient of the transmission when set.
	B: Indicates unit B as a recipient when set.
All transmissions to unit A will therefore have the pattern: 1 x1 xxx xxx; those to unit B,
the pattern 1 1x xxx xxx; and those directed to both units, the pattern: 1 11 xxx xxx.

The bit pattern 1 00 xxx xxx is universally ignored by the microprocessors.
It has been used allow communications with other microprocessors
that may be installed in the communications line for diagnostic purposes
(for example, a diagnostic microprocessor that simulates sensor signals).

The next 3 bits (C C C) are the COMMAND FIELD, and the last 3 (M M M) the COUNTER/SUBCOMMAND field.
They are used by the Command Layer to implement the basic commands described in section 1f.

2biii. Data Transfer Formats
----------------------------
To provide an added check against transmission errors, two data transmission formats are defined:
one for short transmissions and the other for long transmissions.
When blocks of data are to be transferred from a microprocessor one of these formats will be used.

For short transmissions (in response to the STATS command defined in section 1f), the following bytes are transferred:
	'#':		Indicates start of a short transmission
	SIZE:		Indicates the amount of data being transferred.
			This can range from 1 to 100 (hexadecimal).
			The latter value is indicated when SIZE is set to 0.
	<Data>:		A number of bytes indicated by SIZE
	Check Sum:	The sum of all the Data bytes, modulo 100 (hex).

Long transmissions (used for the DUMP command) are formatted the same, except that the header is ':', instead of '#'.
Also, with long transmissions, the master PC is expected to send back one of the following responses:
	ACCEPT:	The bit sequence: 1 xx 011 000
	REJECT:	The bit sequence: 1 xx 011 011
	STOP:	The bit sequence: 1 xx 011 111
Any other bit sequence received by the microprocessor is interpreted as a STOP, for the sake of network security.

If the microprocessor receives a REJECT, it will resend the data it just got through sending.
If it receives an ACCEPT, it will send the next block of data.
If it receives a STOP, it will abort the long transmission.
A pre-determined number of consecutive REJECT's (3) is interpreted as a STOP.

After receiving an ACCEPT on the last block of data transmitted,
the micro will signal the end of transmission by sending a period: '.'.
This indicates the successful completion of a long transmission.

This protocol is a simplification of the XMODEM protocol.

2c. The Command Layer
⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯⋯
To implement the commands described in section 1f, the following bit patterns are used:

Commands to the microprocessor:
	STATUS			1  x x  0 1 0  0 0 0
	TEST			1  x x  0 1 1  0 0 0
	ABORT			1  x x  0 1 1  1 1 1
	DUMP from Input m	1  x x  0 0 1  m m m
	STATS from Input m	1  x x  0 0 0  m m m
with the following key:
	mmm	Input
	―――	―――――
	000	0
	001	1
	010	2
	011	3
	100	4
	101	5

A summary of these commands is given below:
	STATUS:	Queries the current state of the data collection unit.
		The microprocessor will respond sending one of the following characters:
		'0' = ACTIVE:	In active command mode, ready to start a new test.
		'1' = WAITING:	In test mode, waiting on the first sensor.
		'2' = TESTING:	In test mode, collecting data, waiting on the second sensor.
	TEST:	Tells the microprocessor to pass into the waiting mode.
		Ignored unless the micro is in the ACTIVE mode.
	ABORT:	Forces the processor back into the active mode.
		Also used to abort long data transfers.
	DUMP:	Initiates a transfer by the microprocessor to the master PC of the nutation widths
		for the indicated counter of the most recent test, using the long transfer format.
		Each nutation width is send as an unsigned 4-byte integer with the lowest order byte being sent first.
	STATS:	Initiates a transfer to the PC of the statistical data of the most recent test.
		The following data is packaged into the short transmission format and is then sent:
			Bytes	Name	Meaning
			―――――	――――	―――――――
			0	State	Bit 6: set if there was no test since the micro was reset, or if the last test was aborted.
					Bits 0-5: Set if the respective input 0-5 never received any input from a meter.
			1-2	Cycles	The number of complete nutations counted in the test
			3-6	TIME	The total test time
			7-10	First	The time that the first nutation occured
			11-14	Last	The time that the last nutation occured
			15-22	Square	The sum of the squares of all the nutation widths.
		Corresponding to the figure shown in section 1c,
		the last 5 items are, respectively: N, T - S, B, C, and Q, with the low order byte sent first.
