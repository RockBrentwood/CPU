.HM A 1 1 1 1 1 1
.H 1 "Appendix for as6809 Frankenstein Assembler"
.H 2 "Pseudo Operations"
.H 3 "Standard Pseudo Operation Mnemonics"
.VL 40 5 1
.LI "End"
END
.LI "File Inclusion"
INCL
INCLUDE
.LI "If"
IF
.LI "Else"
ELSE
.LI "End If"
ENDI
.LI "Equate"
EQU
.LI "Set"
SET
.LI "Org"
ORG
.LI "Reserve Memory"
RESERVE
RMB
.LI "Define Byte Data"
BYTE
DB
FCB
.LI "Define Word Data"
DW
FDB
WORD
.LI "Define String Data"
FCC
STRING
.LI "Define Character Set Translation"
CHARSET
.LI "Define Character Value"
CHARDEF
CHD
.LI "Use Character Translation"
CHARUSE
.LE
.H 2 "Instructions"
.H 3 "Instruction List"
.TS H
;
l l l.
Opcode	Syntax	Selection Criteria
.sp
.TH
.sp
ABX	 
.sp
ADCA	 '#' expr
ADCA	 expr	DIRECT
ADCA	 expr	EXTENDED
ADCA	 indexed
.sp
ADCB	 '#' expr
ADCB	 expr	DIRECT
ADCB	 expr	EXTENDED
ADCB	 indexed
.sp
ADDA	 '#' expr
ADDA	 expr	DIRECT
ADDA	 expr	EXTENDED
ADDA	 indexed
.sp
ADDB	 '#' expr
ADDB	 expr	DIRECT
ADDB	 expr	EXTENDED
ADDB	 indexed
.sp
ADDD	 '#' expr
ADDD	 expr	DIRECT
ADDD	 expr	EXTENDED
ADDD	 indexed
.sp
ANDA	 '#' expr
ANDA	 expr	DIRECT
ANDA	 expr	EXTENDED
ANDA	 indexed
.sp
ANDB	 '#' expr
ANDB	 expr	DIRECT
ANDB	 expr	EXTENDED
ANDB	 indexed
.sp
ANDCC	 '#' expr
.sp
ASL	 expr	DIRECT
ASL	 expr	EXTENDED
ASL	 indexed
.sp
ASLA	 
.sp
ASLB	 
.sp
ASR	 expr	DIRECT
ASR	 expr	EXTENDED
ASR	 indexed
.sp
ASRA	 
.sp
ASRB	 
.sp
BCC	 expr
.sp
BCS	 expr
.sp
BEQ	 expr
.sp
BGE	 expr
.sp
BGT	 expr
.sp
BHI	 expr
.sp
BHS	 expr
.sp
BITA	 '#' expr
BITA	 expr	DIRECT
BITA	 expr	EXTENDED
BITA	 indexed
.sp
BITB	 '#' expr
BITB	 expr	DIRECT
BITB	 expr	EXTENDED
BITB	 indexed
.sp
BLE	 expr
.sp
BLO	 expr
.sp
BLS	 expr
.sp
BLT	 expr
.sp
BMI	 expr
.sp
BNE	 expr
.sp
BPL	 expr
.sp
BRA	 expr
.sp
BRN	 expr
.sp
BSR	 expr
.sp
BVC	 expr
.sp
BVS	 expr
.sp
CLR	 expr	DIRECT
CLR	 expr	EXTENDED
CLR	 indexed
.sp
CLRA	 
.sp
CLRB	 
.sp
CMPA	 '#' expr
CMPA	 expr	DIRECT
CMPA	 expr	EXTENDED
CMPA	 indexed
.sp
CMPB	 '#' expr
CMPB	 expr	DIRECT
CMPB	 expr	EXTENDED
CMPB	 indexed
.sp
CMPD	 '#' expr
CMPD	 expr	DIRECT
CMPD	 expr	EXTENDED
CMPD	 indexed
.sp
CMPS	 '#' expr
CMPS	 expr	DIRECT
CMPS	 expr	EXTENDED
CMPS	 indexed
.sp
CMPU	 '#' expr
CMPU	 expr	DIRECT
CMPU	 expr	EXTENDED
CMPU	 indexed
.sp
CMPX	 '#' expr
CMPX	 expr	DIRECT
CMPX	 expr	EXTENDED
CMPX	 indexed
.sp
CMPY	 '#' expr
CMPY	 expr	DIRECT
CMPY	 expr	EXTENDED
CMPY	 indexed
.sp
COM	 expr	DIRECT
COM	 expr	EXTENDED
COM	 indexed
.sp
COMA	 
.sp
COMB	 
.sp
CWAI	 '#' expr
.sp
DAA	 
.sp
DEC	 expr	DIRECT
DEC	 expr	EXTENDED
DEC	 indexed
.sp
DECA	 
.sp
DECB	 
.sp
EORA	 '#' expr
EORA	 expr	DIRECT
EORA	 expr	EXTENDED
EORA	 indexed
.sp
EORB	 '#' expr
EORB	 expr	DIRECT
EORB	 expr	EXTENDED
EORB	 indexed
.sp
EXG	 register ',' register
.sp
INC	 expr	DIRECT
INC	 expr	EXTENDED
INC	 indexed
.sp
INCA	 
.sp
INCB	 
.sp
JMP	 expr	DIRECT
JMP	 expr	EXTENDED
JMP	 indexed
.sp
JSR	 expr	DIRECT
JSR	 expr	EXTENDED
JSR	 indexed
.sp
LBCC	 expr
.sp
LBCS	 expr
.sp
LBEQ	 expr
.sp
LBGE	 expr
.sp
LBGT	 expr
.sp
LBHI	 expr
.sp
LBHS	 expr
.sp
LBLE	 expr
.sp
LBLO	 expr
.sp
LBLS	 expr
.sp
LBLT	 expr
.sp
LBMI	 expr
.sp
LBNE	 expr
.sp
LBPL	 expr
.sp
LBRA	 expr
.sp
LBRN	 expr
.sp
LBSR	 expr
.sp
LBVC	 expr
.sp
LBVS	 expr
.sp
LDA	 '#' expr
LDA	 expr	DIRECT
LDA	 expr	EXTENDED
LDA	 indexed
.sp
LDB	 '#' expr
LDB	 expr	DIRECT
LDB	 expr	EXTENDED
LDB	 indexed
.sp
LDD	 '#' expr
LDD	 expr	DIRECT
LDD	 expr	EXTENDED
LDD	 indexed
.sp
LDS	 '#' expr
LDS	 expr	DIRECT
LDS	 expr	EXTENDED
LDS	 indexed
.sp
LDU	 '#' expr
LDU	 expr	DIRECT
LDU	 expr	EXTENDED
LDU	 indexed
.sp
LDX	 '#' expr
LDX	 expr	DIRECT
LDX	 expr	EXTENDED
LDX	 indexed
.sp
LDY	 '#' expr
LDY	 expr	DIRECT
LDY	 expr	EXTENDED
LDY	 indexed
.sp
LEAS	 indexed
.sp
LEAU	 indexed
.sp
LEAX	 indexed
.sp
LEAY	 indexed
.sp
LSL	 expr	DIRECT
LSL	 expr	EXTENDED
LSL	 indexed
.sp
LSLA	 
.sp
LSLB	 
.sp
LSR	 expr	DIRECT
LSR	 expr	EXTENDED
LSR	 indexed
.sp
LSRA	 
.sp
LSRB	 
.sp
MUL	 
.sp
NEG	 expr	DIRECT
NEG	 expr	EXTENDED
NEG	 indexed
.sp
NEGA	 
.sp
NEGB	 
.sp
NOP	 
.sp
ORA	 '#' expr
ORA	 expr	DIRECT
ORA	 expr	EXTENDED
ORA	 indexed
.sp
ORB	 '#' expr
ORB	 expr	DIRECT
ORB	 expr	EXTENDED
ORB	 indexed
.sp
ORCC	 '#' expr
.sp
PSHS	 register list
.sp
PSHU	 register list
.sp
PULS	 register list
.sp
PULU	 register list
.sp
ROL	 expr	DIRECT
ROL	 expr	EXTENDED
ROL	 indexed
.sp
ROLA	 
.sp
ROLB	 
.sp
ROR	 expr	DIRECT
ROR	 expr	EXTENDED
ROR	 indexed
.sp
RORA	 
.sp
RORB	 
.sp
RTI	 
.sp
RTS	 
.sp
SBCA	 '#' expr
SBCA	 expr	DIRECT
SBCA	 expr	EXTENDED
SBCA	 indexed
.sp
SBCB	 '#' expr
SBCB	 expr	DIRECT
SBCB	 expr	EXTENDED
SBCB	 indexed
.sp
SEX	 
.sp
STA	 expr	DIRECT
STA	 expr	EXTENDED
STA	 indexed
.sp
STB	 expr	DIRECT
STB	 expr	EXTENDED
STB	 indexed
.sp
STD	 expr	DIRECT
STD	 expr	EXTENDED
STD	 indexed
.sp
STS	 expr	DIRECT
STS	 expr	EXTENDED
STS	 indexed
.sp
STU	 expr	DIRECT
STU	 expr	EXTENDED
STU	 indexed
.sp
STX	 expr	DIRECT
STX	 expr	EXTENDED
STX	 indexed
.sp
STY	 expr	DIRECT
STY	 expr	EXTENDED
STY	 indexed
.sp
SUBA	 '#' expr
SUBA	 expr	DIRECT
SUBA	 expr	EXTENDED
SUBA	 indexed
.sp
SUBB	 '#' expr
SUBB	 expr	DIRECT
SUBB	 expr	EXTENDED
SUBB	 indexed
.sp
SUBD	 '#' expr
SUBD	 expr	DIRECT
SUBD	 expr	EXTENDED
SUBD	 indexed
.sp
SWI2	 
.sp
SWI3	 
.sp
SWI	 
.sp
SYNC	 
.sp
TFR	 register ',' register
.sp
TST	 expr	DIRECT
TST	 expr	EXTENDED
TST	 indexed
.sp
TSTA	 
.sp
TSTB	 
.TE
.H 3 "Operand Types"
.H 4 "register list"
The operands for the push and pull operations consist of a list of
one or more registers seperated by commas.
The stack pointer associated with an operator will give an error if
it occurs in the list.
The registers can be D, X, Y, U, S, PC, A, B, CC, DP and their lower case
equivalents.
For the push and pull operations, the D register is an alias for the
A and B registers, and will result in two selection bits set in the
postbyte.
.H 4 "indexed"
The indexed mode operands are in the forms.
.VL 25 5 1
.LI ", index"
.LI "expr , index"
.LI "accumulator , index"
.LI ", index +"
.LI ", index ++"
.LI ", - index"
.LI ", -- index"
.LI "expr , PCR"
.LI "[ , index ]"
.LI "[ expr , index ]"
.LI "[ accumulator , index ]"
.LI "[ , index ++ ]"
.LI "[ , -- index ]"
.LI "[ expr , PCR ]"
.LI "[ expr ]"
.LE
.P
Index can be any of X, Y, S, U (or their lower case equivalents). 
Accumulator can be any of A, B, D (or their lower case equivalents).
.P
The short offset forms will only be used if the expression in the operand
has a value defined at the first pass, and the value is small enough to fit.
Expressions that have an as yet undefined value will use the 16 bit offset 
form.
.H 3 "Selection Criteria Keywords"
.VL 25 5 
.LI DIRECT
The instruction can use the direct addressing mode.  
The expression must have a value between 0 and 255 that is defined when the
instruction is processed in the input pass.
.LI EXTENDED
The instruction can use the extended addressing mode.
.LE
.H 3 "Apostrophes"
The apostrophes in the syntax field are a notation used for the
parser generator and are not put in the assembler source statement.
.H 2 "Notes"
.H 3 "Reserved Symbols"
.H 4 "Machine Dependent Reserved Symbols"
A
B
CC
D
DP
PC
PCR
S
U
X
Y
a
b
cc
d
dp
pc
pcr
s
u
x
y
.H 4 "Standard Reserved Symbols"
AND
DEFINED
EQ
GE
GT
HIGH
LE
LOW
LT
MOD
NE
NOT
OR
SHL
SHR
XOR
and
defined
eq
ge
gt
high
le
low
lt
mod
ne
not
or
shl
shr
xor
.TC 1 1 7
