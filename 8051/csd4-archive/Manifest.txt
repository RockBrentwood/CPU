The 8051 csd4 Archive
━━━━━━━━━━━━━━━━━━━━━
If you do any significant development using this, I'd be interested in hearing about it.
Keep in touch.

./:	Top Level
	README		A briefing on this package.
	Manifest.txt	This file: a list and briefing on the files in this archive.
	regs.txt	A summary of the 8052 special function registers and interrupts
	creed.txt	The Free Software Creed adhered to in this archive.

	«8051 Formatting»:
	a51grind.txt	A specification file to be used with UNIX's tgrind facility and LaTex.
			Tells tgrind how to format 8051 software for LaTex.
			The typical command like would like this:
				tgrind -d a51grind <Source files...>
			This line
			│        :kw=ds rb rw db byte dw word org at seg end global public\
			│            extern include if else equ set high low by code xdata data sft bit\
			will have to be adjusted to reflect the keywords used by your assembler.

./assem: «8051 Assembler and Disassembler»:
	cas.c,{link,st,res,op,ex,io}.{c,h}	Assembler source
	cas.txt					8051 Assembler documentation.
	README, Notes.txt			Start-up notes in the assembler.
	Makefile				UNIX-compatible makefile (the legacy DOS-compatible has been integrated into it).
	semi.{c,txt}				A utility to convert the ‟;” comment-header to ‟;;”.
	nl.{c,txt}				A utility to convert LF end-of-line markers to host-native form.
	ds.{c,txt}				Object file display source and documentation on the object file format.
	reloc.{c,txt}				Hex file relocating utility.
	test.sh, LogEx				Files used for ‟make test”.

	«8051 Disassembler>: The disassembler does some control flow analysis to find what to disassemble.
	das.{c,txt}				8052 Disassembler source
	dac.c					A «very» primitive 8052 C decompiler

./assem/data: «Sample/Test Files»: a modularized clone of ./data.
	8051fa.h {data,kernel,math,stdio}.{asm,h}	A modularized copy of 8051/data
	data.hex					The output of the assembler
	Makefile					A UNIX and DOS compatible makefile
	{data,kernel,math,stdio}.ds			Files used for testing ‟ds”.
	data.{c,s}, entries				Files used for testing ‟das” and ‟dac”.
	data.hx						File used for testing ‟reloc”.

./assem/hexs: «Sample/Test Files»
	The demo program, r.a, is a program that echoes on every key sent it except s.
	On s, it performs a hex dump of a specific segment of memory.
	This is solely to demonstrate the viability of communications at 57600 baud.
	A 57600 baud PC client is included: client/demo.exe.
	r.asm					A non-trivial sample assembly program.
	r.hex					The output of the assembler.
	r.ds					File used for testing ‟ds”.
	r.{c,s}, entries			Files used for testing ‟das” and ‟dac”.
	r.hx					File used for testing ‟reloc”.

./client: «Client»
	PC-compatible serial routines for RS-232, RS-422, RS-485.
	makefile		Microsoft Quick C 2.5 makefile
	com.{c,h}		RS-232 interrupt-driven routines for PC.
	port.h			Generic declarations for the PC's COM ports.
	client.{c,txt}, demo.c	PC clients for 9600,N,8,1 (client) and 57600,N,9,1 (demo) and user reference
	micronet.{c,h,txt}	The MicroNet source & command reference.
				Used with the data collection software in the data directory.
	console.{c,h}		IBM AT-compatible, VGA-compatible console routines.
				Used with serial.c
	serial.{c,txt}		Diagnostic command/communications monitor for MicroNet and user reference.

./crc: «CRC»
	An 8051 8-bit CRC demo.
	Redefines Intel Hex Format so that it uses 8-bit CRC's, and performs a hex dump of addresses 0 to 2000h in the code space.
	crc.txt		A brief outline of the crc demo.
	8052.h		Include file for crc.asm ... a copy of ./kernel/8052.h
	crc.asm		A program that prints out an Intel Hex Format dump of addresses 0 to 1fffh in code space.
			However, instead of calculating check sums by adding all the bytes on each line,
			as is done with Intel Hex Format, an 8-bit CRC is produced.
			This also demonstrates communications at 57600 baud using 9 bit addressing.
			The serial address in this program is ':'.
			Every key except 's' is echoed.
			A hex dump, as described above, is send when 's' is received.
			Responses will only be produced when the address received exactly matches ':'.
	crc.hex		The assembled CRC demo.
	crc.c		C source for a filter that verifies Intel Hex Format CRC's.
	sample.hex	A sample Intel Hex Format file redefined to use 8-bit CRC's.
			If crc.c is compiled into an executable (named crc),
			then running crc <sample.hex will verify sample.hex.
			This file was generated by crc.asm.

./data: «Data»
	8051fa multi-threading data collection software.
	Can handle up to 6 falling edge inputs concurrently at rates up to 400Hz each.
	8051fa.h	A copy of the ./kernel/8051fa.h file in the kernel directory.
	math_lib.s	A subset of the ./kernel/math_lib.s file in the kernel directory.
	stdio_lib.s	RS-485 compatible serial I/O routines.
	kernel_lib.s	Embedded multi-threading kernel, customized for data.asm.
	data.asm	The data collection software.
	data.hex	The assembled data collection software.
	data.txt	Technical reference for the data collection unit and for MicroNet.

./debug: «Debugger»
	An 8052 Debugger, with the following features:
	―	Serial Communications over RS-232.
	―	Intel Hex data transfer in both directions
	―	Client software written in Quick C (2.5) for AT-compatible PCs.
	The executable is also included (client.exe in the client directory).
	8052.h		A copy of the 8052.h file in the kernel directory.
	debug.asm	An 8051 debugger.
	debug.hex	The debugger assembled in Intel Hex Format.
	debug.txt	User and programmer documentation.

./drive: «Drive»
	An open-loop stepper motor driver.
	Compatible on RS-232, RS-422, or RS-485.
	kc_lib.s	Embedded multi-threading kernel (customized version of ./kernel/kernel_lib.s).
	math_lib.s	Math library (a subset of the full library provided with the the 8051 package).
	rx9_lib.s	RS-485 serial communication routines.
	timer_lib.s	Timer 2 routines.
	drive.asm	The stepper motor driver.
	drive.txt	Technical reference for the driver unit.
	drive.hex	The assembled software in Intel Hex Format

./kernel: «8051 Multi-Threading Kernel Library Template»
	«Roll-Your-Own 8051 Kernel»: A small library of routines for doing multi-threaded multi-tasking.
	kernel_lib.s	The 8051 multitasking kernel skeleton.
	kernel.txt	Usage notes on the multitasking kernel.

	«Include Files for 8051 Extensions»:
	8052.h		For the 8052.
	8051fa.h	For the 80C51FA.

	«8051 Arbitrary Precision Math»: Math routines, including square root and division
	math_lib.s	The Math Library.
	math.txt	User reference for the Math Library.

	«Interrupt»: An 8051FA interrupt demo written to be used with a LCD, and keypad routines (listed below).
	int.{asm,txt}	The 8051FA interrupt demo software and user reference.
	int.hex		The assembled interrupt demo software.

	«LCD»: A demo for the LCD/keypad library.
	lcd.{asm,txt}	Demo software for io_lib.s and user reference; uses kernel_lib.s.
	lcd.hex		The assembled demo software.

	«IO»: The LCD/keypad library. Requires compatible hardware.
	io_lib.s	An LCD/keypad interface.
	io.txt		User reference.
